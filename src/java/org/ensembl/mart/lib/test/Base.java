/* Generated by Together */

package org.ensembl.mart.lib.test;

import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import junit.framework.TestCase;

import org.ensembl.driver.ConfigurationException;
import org.ensembl.driver.Driver;
import org.ensembl.driver.DriverManager;
import org.ensembl.mart.lib.DatabaseUtil;
import org.ensembl.mart.lib.Engine;
import org.ensembl.mart.lib.Query;

/**
 * Base class for tests that sets up the logging system if necessary. 
 * 
 * Loads logging configuration file from data/junit_logging.conf if it exists. Otherwise
 * the logging level defaults to WARNING for all classes.
 */
public abstract class Base extends TestCase {

  private Logger logger = Logger.getLogger(Base.class.getName());
	private final static String connprops = "data/testconnection.conf";
	private final static String connpropsEnsj = "data/testconnection_ensj.conf";
  
  private final static String DEFAULT_LOGGING_CONF_URL = "data/junit_logging.properties";

  private final String DEFAULTDBTYPE = "mysql";
  private final String DEFAULTHOST = "kaka.sanger.ac.uk";
  private final String DEFAULTPORT = "3306";
  private final String DEFAULTDATABASE = "ensembl_mart_15_1";
  private final String DEFAULTUSER = "anonymous";
  
  private String databaseType = null; // default, override in testconnection.conf
	private String host = null;
  private String port = null;
  private String databaseName = null;
  private String user = null;
	private String password = null;
	private Properties p = new Properties();
	private URL connectionconf;

	protected Driver ensjDriver = null;
	protected Engine engine;
	protected Query genequery = new Query();
	protected Query snpquery = new Query();

	public void init() {
    
		connectionconf = ClassLoader.getSystemResource(connprops);

		if (connectionconf != null) {
			try {
				p.load(connectionconf.openStream());

        String tmp = p.getProperty("databaseType");
				databaseType = (tmp != null && tmp.length() > 1) ? tmp : DEFAULTDBTYPE;
				
				tmp = p.getProperty("host");
				host = (tmp != null && tmp.length() > 1) ? tmp : DEFAULTHOST;
				
        tmp = p.getProperty("port");
				port = (tmp != null && tmp.length() > 1) ? tmp : DEFAULTPORT;
				
        tmp = p.getProperty("databaseName");
				databaseName = (tmp != null && tmp.length() > 1) ? tmp : DEFAULTDATABASE;
				
				tmp = p.getProperty("user");
				user =  (tmp != null && tmp.length() > 1) ? tmp : DEFAULTUSER;
				
				password = p.getProperty("password");
			} catch (java.io.IOException e) {
				System.out.println(
					"Caught IOException when trying to open connection configuration file " + connprops + "\n" + e + "\n\nusing default connection parameters");
			}
		} else {
			System.out.println("Failed to find connection configuration file " + connprops + " using default connection parameters");

      databaseType = DEFAULTDBTYPE;
			host = DEFAULTHOST;
      databaseName = DEFAULTDATABASE;
			user = DEFAULTUSER;
		}

		try {
			ensjDriver = DriverManager.load(connpropsEnsj);
		} catch (ConfigurationException e) {
			logger.log(Level.WARNING, "", e );
		}

	}

	public void setUp() throws SQLException {
		init();

		engine = new Engine( databaseType, host, port, databaseName, user, password);
    genequery.setStarBases(new String[] { "hsapiens_ensemblgene", "hsapiens_ensembltranscript" });
		genequery.setPrimaryKeys(new String[] { "gene_id", "transcript_id" });
		snpquery.setStarBases(new String[] { "hsapiens_snp" });
		snpquery.setPrimaryKeys(new String[] { "snp_id" });
	}

	public Base(String name) {
		super(name);
    URL loggingConfig = Base.class.getClassLoader().getResource( DEFAULT_LOGGING_CONF_URL );
    if ( loggingConfig!=null ) {
      try {
        LogManager.getLogManager().readConfiguration( loggingConfig.openStream() );
  		} catch (SecurityException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
    }
    else {
      Logger.getLogger("").setLevel( Level.WARNING );
    }
	}

  public Connection getDBConnection() throws Exception {

		Class.forName("org.gjt.mm.mysql.Driver").newInstance();
    		
		return DatabaseUtil.getConnection("mysql", host, port, databaseName, user, password );
  }
}