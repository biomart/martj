/* Generated by Together */

package org.ensembl.mart.lib.test;

import java.io.IOException;
import java.net.URL;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import junit.framework.TestCase;

import org.ensembl.mart.lib.DetailedDataSource;
import org.ensembl.mart.lib.Engine;
import org.ensembl.mart.lib.Query;

/**
 * Base class for tests that sets up the logging system if necessary. 
 * 
 * <ol>Loads these configuration files from classpath:
 *   <li>data/test_logging.conf - loads if it exists,otherwise
 * the logging level defaults to WARNING for all classes. Can be overridden
 * by setting the JVM parameter "java.util.logging.config.file".
 *   <li>data/test_connection.properties - mart db connection settings. 
 * Defaults to latest ensmart db on kaka.sanger.ac.uk if file unavailable.
 *   <li>data/test_connection_ensj.properties - database connection settings
 * for ensembl database. Needed to compare output from martj with ensj.
 *  </ol>
 */
public abstract class Base extends TestCase {

	private String jdbcDriver;

	private Logger logger = Logger.getLogger(Base.class.getName());

	private final static String MARTJ_DB_CONFIG_URL =
		"data/test_connection.properties";

	

	private final static String LOGGING_CONFIG_URL =
		"data/test_logging.properties";

	private final String DEFAULTDBTYPE = "mysql";
	
	private final String DEFAULTHOST = "ensembldb.ensembl.org";
	private final String DEFAULTPORT = "3306";
	private final String DEFAULTDATABASE = "ensembl_mart_19_2";
	private final String DEFAULTUSER = "anonymous";
	
    
    private final String DEFAULT_JDBC_DRIVER = "com.mysql.jdbc.Driver";



	private String databaseType;
	// default, override in testconnection.conf
	private String host;
	private String port;
	private String databaseName;
  private String user;
	private String password;
	private Properties p = new Properties();
	private URL connectionconf;

	protected Engine engine;
	protected Query genequery = new Query();
	protected Query snpquery = new Query();
  protected DetailedDataSource martJDataSource;


	public void init() {

		connectionconf = ClassLoader.getSystemResource(MARTJ_DB_CONFIG_URL);

		if (connectionconf != null) {
			try {
				p.load(connectionconf.openStream());

				String tmp = p.getProperty("databaseType");
				databaseType = (tmp != null && tmp.length() > 1) ? tmp : DEFAULTDBTYPE;

				tmp = p.getProperty("host");
				host = (tmp != null && tmp.length() > 1) ? tmp : DEFAULTHOST;

				tmp = p.getProperty("port");
				port = (tmp != null && tmp.length() > 1) ? tmp : DEFAULTPORT;

				tmp = p.getProperty("databaseName");
				databaseName =
					(tmp != null && tmp.length() > 1) ? tmp : DEFAULTDATABASE;

				tmp = p.getProperty("user");
        user = (tmp != null && tmp.length() > 1) ? tmp : DEFAULTUSER;

        tmp = p.getProperty("jdbc_driver");
        jdbcDriver = (tmp != null && tmp.length() > 1) ? tmp : DEFAULT_JDBC_DRIVER;
				password = p.getProperty("password");
        
			} catch (java.io.IOException e) {
				System.out.println(
					"Caught IOException when trying to open connection configuration file "
						+ MARTJ_DB_CONFIG_URL
						+ "\n"
						+ e
						+ "\n\nusing default connection parameters");
			}
		} else {
			System.out.println(
				"Failed to find connection configuration file "
					+ MARTJ_DB_CONFIG_URL
					+ " using default connection parameters");

			databaseType = DEFAULTDBTYPE;
			host = DEFAULTHOST;
			databaseName = DEFAULTDATABASE;
			user = DEFAULTUSER;
      jdbcDriver = DEFAULT_JDBC_DRIVER;
		}

		

	}

	public void setUp() throws Exception {
		init();

		martJDataSource = new DetailedDataSource(
				databaseType,
				host,
				port,
        databaseName,
				user,
				password,
				DetailedDataSource.DEFAULTPOOLSIZE,
				jdbcDriver);
		engine = new Engine();
    
		genequery.setStarBases(
			new String[] { "hsapiens_ensemblgene__gene__main", "hsapiens_ensemblgene__transcript__main" });
		genequery.setPrimaryKeys(new String[] { "gene_id_key", "transcript_id_key" });
    genequery.setDataSource( martJDataSource );
    genequery.setDataset( "hsapiens" );
      
		snpquery.setStarBases(new String[] { "hsapiens_snp__snp__main" });
		snpquery.setPrimaryKeys(new String[] { "snp_id_key" });
	}

	public Base(String name) {
		super(name);
    String envVar = System.getProperty("java.util.logging.config.file"); 
    if ( envVar!=null ) {
      return;
    }
    
		URL loggingConfig =
			Base.class.getClassLoader().getResource(LOGGING_CONFIG_URL);
		if (loggingConfig != null) {
			try {
				LogManager.getLogManager().readConfiguration(
					loggingConfig.openStream());
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} else {
			Logger.getLogger("").setLevel(Level.WARNING);
		}
	}


}