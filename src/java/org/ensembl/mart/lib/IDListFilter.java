/* Generated by Together */

/*
    Copyright (C) 2003 EBI, GRL

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.ensembl.mart.lib;
import java.io.*;
import java.net.*;
import java.util.*;

/**
 * IDListFilter object for storing a list of IDs of a particular
 * type to restrict Queries on.  IDListFilter objects can be
 * created on a single id (if you are only going to add one id,
 * you should just use a BasicFilter object instead, this one is more
 * useful for the MartExplorerTool to add multiple ids in succession),
 * a String[] of ids, a File of ids, a URL of ids, or
 * an InputStream of ids.  For each type of IDListFilter Object other
 * than STRING, there should be a corresponding IDListFilterHandler object
 * or objects to resolve the underlying data Object into a STRING type
 * IDListFilter Object.
 * 
 * @author <a href="mailto:craig@ebi.ac.uk">Craig Melsopp</a>
 * @author <a href="mailto:dlondon@ebi.ac.uk">Darin London</a>
 * @see IDListFilterHandler
 */
public class IDListFilter implements Filter {

	/**
	 * enums over IDListFilter type
	 */
	public static final int STRING = 1;
	public static final int FILE = 2;
	public static final int URL = 3;
	public static final int SUBQUERY = 4;

	/**
	 * Copy constructor.
	 * 
	 * @param o - an IDListFilter object
	 */
	public IDListFilter(IDListFilter o) {
		name = o.getName();
		tableConstraint = o.getTableConstraint();
    type = o.getType();
    
    switch (type) {
    	case STRING:
    	  identifiers = new ArrayList( Arrays.asList( o.getIdentifiers() ) );
    	  break;
    	  
    	case FILE:
    	  file = o.getFile();
    	  break;
    	  
    	case URL:
    	  url = o.getUrl();
    	  break;    	 
    	
    	case SUBQUERY:
    	  subQuery = o.getSubQuery();
    	  break;    	
    }
	}

	/**
	 * Constructor for a STRING type IDListFilter object with a given field_name with a single identifier.
	 * @param name
	 * @param identifier
	 */
	public IDListFilter(String name, String identifier) {
		this(name, "", identifier);
	}

	/**
	 * Constructor for a STRING type IDListFilter object of a given field name,
	 * and table Constraint, with a single identifier.
	 * Other identifiers can be added later with addIdentifier.
	 *  
	 * @param String name = field name
	 * @param String tableConstraint = table Constraint for field name
	 * @param String identifier
	 */
	public IDListFilter(String name, String tableConstraint, String identifier) {
		this.name = name;
		this.tableConstraint = tableConstraint;
		identifiers.add(identifier);
		type = STRING;
	}

	/**
	 * Construct an STRING type IDListFilter object of a given field name on a String[] List of 
	 * identifiers.
	 * 
	 * @param String name - field name
	 * @param String[] identifiers
	 */
	public IDListFilter(String name, String[] identifiers) {
		this(name, "", identifiers);
	}

	/**
	 * Construct an STRING type IDListFilter object of a given field name and tableConstraint, on a String[] List of 
	 * identifiers.
	 * 
	 * @param String name - field name
	 * @param String tableConstraint - table constraint for field name
	 * @param String[] identifiers
	 */
	public IDListFilter(String name, String tableConstraint, String[] identifiers) {
		this.name = name;
		this.tableConstraint = tableConstraint;
		this.identifiers = Arrays.asList(identifiers);
		type = STRING;
	}

	/**
	 * Construct a FILE type IDListFilter object of a given field name from a file
	 * containing identifiers.
	 * 
	 * @param String name - field name
	 * @param File file
	 */
	public IDListFilter(String name, File file) {
		this(name, "", file);
	}

	/**
	 * Construct a FILE type IDListFilter object of a given field name from a file
	 * containing identifiers.
	 * 
	 * @param String name - field name
	 * @param String tableConstraint - table constraint for field name
	 * @param File file
	 */
	public IDListFilter(String name, String tableConstraint, File file) {
		this.name = name;
		this.tableConstraint = tableConstraint;
		this.file = file;
		type = FILE;
	}

	/**
	 * Construct a URL type IDListFilter object of a given field name 
	 * from a specified URL object containing identifiers.  
	 * 
	 * @param String name - field name
	 * @param URL url
	 */
	public IDListFilter(String name, URL url) {
		this(name, "", url);
	}

	/**
	 * Construct a URL type IDListFilter object of a given field name 
	 * and table constraint, from a specified URL object containing identifiers. 
	 * 
	 * @param String name - field name
	 * @param String tableConstraint - table constraint for field name
	 * @param URL url - url pointing to resource with IDs
	 */
	public IDListFilter(String name, String tableConstraint, URL url) {
		this.name = name;
		this.tableConstraint = tableConstraint;
		this.url = url;
		type = URL;
	}

	/**
	 * Construct a SUBQUERY type IDListFilter object of a given field name
	 * from a Query object that fits the constraints of a subQuery.
	 * @param String name - field name
	 * @param Query subQuery - Query that, when evaluated, returns a list of IDs
	 * @see QueryIDListFilterHandler 
	 */
	public IDListFilter(String name, Query subQuery) {
		this(name, "", subQuery);
	}

	/**
	 * Construct a SUBQUERY type IDListFilter object of a given field name
	 * and table constraint, from a Query object that fits the constraints of
	 * a subQuery.
	 * @param String name - field name
	 * @param String tableConstraint - table constraint for field name
	 * @param Query subQuery - Query that, when evaluated, returns a list of IDs
	 * @see QueryIDListFilterHandler 
	 */
	public IDListFilter(String name, String tableConstraint, Query subQuery) {
		this.name = name;
		this.tableConstraint = tableConstraint;
		this.subQuery = subQuery;
		type = SUBQUERY;
	}

	/**
	  * add an identifier to the STRING type IDListFilter
	  * 
	  * @param String identifier
	  */
	public void addIdentifier(String identifier) throws InvalidListException {
		if (!(type == STRING))
			throw new InvalidListException("You can only add identifiers to a STRING type list\n");

		if (!identifiers.contains(identifier))
			identifiers.add(identifier);
	}

	/**
	 * returns the Where Clause for the SQL
	 * 
	 * @return String where clause 'IN (quoted list of identifiers)'
	 * @throws InvalidListException when IDListFilter is not a STRING type.
	 */
	public String getWhereClause() {			
		StringBuffer buf = new StringBuffer();
		buf.append(name).append(" IN (");
		for (int i = 0, n = identifiers.size(); i < n; i++) {
			String element = (String) identifiers.get(i);
			if (i > 0)
				buf.append(", ");
			buf.append("\"").append(element).append("\"");
		}

		buf.append(" ) ");
		return buf.toString();
	}

	/**
	 * same as getWhereClause()
	 */
	public String getRightHandClause() {
		  
		StringBuffer buf = new StringBuffer();
		buf.append(" IN (");
		for (int i = 0, n = identifiers.size(); i < n; i++) {
			String element = (String) identifiers.get(i);
			if (i > 0)
				buf.append(", ");
			buf.append("\"").append(element).append("\"");
		}
		buf.append(" ) ");
		return buf.toString();
	}

	/**
	 * get the String[] List of identifiers
	 * 
	 * @return String[] identifiers
	 */
	public String[] getIdentifiers() {
		String[] ret = new String[identifiers.size()];
		identifiers.toArray(ret);
		return ret;
	}

	/**
	 * get the Field Name of the IDListFilter
	 * 
	 * @return String field name
	 */
	public String getName() {
		return name;
	}

	public String getValue() {
		return null;
	}

  /**
   * Returns the tableConstraint for this IDListFilter Object
   * @return String tableConstriant
   */
	public String getTableConstraint() {
		return tableConstraint;
	}

	/**
	 * Returns the File object underlying a FILE type IDListFilter Object.
	 * 
	 * @return File file
	 */
	public File getFile() {
		return file;
	}

	/**
	 * Returns the Query object underlying a SUBQUERY type IDListFilter Object
	 * @return Query subQuery
	 */
	public Query getSubQuery() {
		return subQuery;
	}

	/**
	 * Returns the type of the IDListFilter Object
	 * @return int type
	 */
	public int getType() {
		return type;
	}

	/**
	 * Returns the underlying URL Object underlying a URL type IDListFilter Object
	 * @return URL url
	 */
	public URL getUrl() {
		return url;
	}


	/**
	 * returns a description of the object useful for logging systems.
	 * 
	 * @return String description(field=field,identifiers=list of identifiers)
	 */
	public String toString() {
		StringBuffer buf = new StringBuffer();

		buf.append("[");
		buf.append(" field=").append(name);
		buf.append(", tableConstraint=").append(tableConstraint);

		switch (type) {
			case STRING :
				buf.append(", identifiers=").append(identifiers);
				break;

			case FILE :
				buf.append(", File=").append(file);
				break;

			case URL :
				buf.append(", URL=").append(url);
				break;

			case SUBQUERY :
				buf.append(", Query=").append(subQuery);
				break;
		}

		buf.append("]");

		return buf.toString();
	}

	/**
	 * Allows Equality Comparisons manipulation of IDListFilter objects
	 */
	public boolean equals(Object o) {
		return o instanceof IDListFilter && hashCode() == ((IDListFilter) o).hashCode();
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode() {
		int tmp = name.hashCode();
		tmp = (31 * tmp) + tableConstraint.hashCode();

		switch (type) {
			case STRING :
				for (int i = 0, n = identifiers.size(); i < n; i++) {
					String element = (String) identifiers.get(i);
					tmp = (31 * tmp) + element.hashCode();
				}
				break;

			case FILE :
				tmp = (31 * tmp) + file.hashCode();
				break;

			case URL :
				tmp = (31 * tmp) + url.hashCode();
				break;

			case SUBQUERY :
				tmp = (31 * tmp) + subQuery.hashCode();
				break;
		}

		return tmp;
	}

	private final String name, tableConstraint;
	private final int type;
	private Query subQuery; // for Query based Filter
	private File file;
	private URL url;
	
	private List identifiers = new ArrayList();
}
