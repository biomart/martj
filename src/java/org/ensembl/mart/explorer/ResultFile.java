/* Generated by Together */

package org.ensembl.mart.explorer;

import java.sql.*;
import java.io.*;
import org.apache.log4j.*;

public class ResultFile implements ResultTarget {

	private final static Logger logger = Logger.getLogger( ResultFile.class.getName() );

	public ResultFile(String fileName, Formatter formatter) {
  	this.name = fileName;
    this.formatter = formatter;
  }

    public String getName() {
        return name;
    }

    public void setName(String fileName) {
        this.name = fileName;
    }

    public Formatter getFormatter() {
        return formatter;
    }

    public void setFormatter(Formatter formatter) {
        this.formatter = formatter;
    }

    public boolean isZipCompreesion(){
            return zipCompreesion;
        }

    public void setZipCompreesion(boolean zipCompreesion){
            this.zipCompreesion = zipCompreesion;
        }

    public boolean isGzipCompression(){
            return gzipCompression;
        }

    public void setGzipCompression(boolean gzipCompression){
            this.gzipCompression = gzipCompression;
        }


    public String toString() {
      StringBuffer buf = new StringBuffer();

			buf.append("[");
      buf.append(" name=").append(name);
      buf.append(" ,formatter=").append(formatter);
      buf.append(" ,zipCompreesion=").append(zipCompreesion);
      buf.append(" ,gzipCompression=").append(gzipCompression);
      buf.append("]");

      return buf.toString();
    }

    public void output(ResultSet rs) throws FormatterException {
      try {
        logger.info( "Writing results to file: " + name );
        formatter.setResultSet( rs );
				FileWriter out = new FileWriter( name );
      	for( String line = formatter.readLine(); line!=null; line=formatter.readLine() )
        	out.write( line );
        out.close();
      }catch ( IOException e ) {
				throw new FormatterException ( e );
      }
      catch (SQLException e) {
				throw new FormatterException ( e );
      }
    }

    private String name;
    private Formatter formatter;
    private boolean zipCompreesion;
    private boolean gzipCompression;
}
