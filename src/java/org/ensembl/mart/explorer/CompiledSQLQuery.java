/* Generated by Together */

package org.ensembl.mart.explorer;

import java.util.*;
import org.apache.log4j.Logger;
import java.sql.*;

/**
 * Compiles a Query into SQL.
 */
public class CompiledSQLQuery {
  public CompiledSQLQuery(Query query, Engine engine) {
    this.query = query;
    this.engine = engine;
  }

  public Query getQuery(){
    return query;
  }

  public String toSQL() throws InvalidQueryException {
    // select gene_stable_id from homo_sapiens_core_gene where
    // chromosome_id="3" limit 3;
    if ( sql==null ) sql = compileSQL();
    return sql;
  }
  
  private String compileSQL() throws InvalidQueryException{
    
    try {
      mappers =  engine.mappers( query ) ;
      
      baseTableName = query.getSpecies() + "_core_" + query.getFocus();

      StringBuffer buf = new StringBuffer();
      
      boolean success = false;
      for(int m=0; m<mappers.length && !success; ++m) {
        buf.delete(0, buf.length());
        success = selectClause( buf, mappers[m] );
        if ( success ) success = fromClause( buf, mappers[m] );
        if ( success ) success = whereClause( buf, mappers[m] );
        
      }
      
      if ( !success ) throw new InvalidQueryException("Failed to compile query :" + query);

      return buf.toString();
      
    } catch (SQLException e) {
      throw new InvalidQueryException("Failed to load column to table mapping.", e);
    }
  }


  /**
   * @return true if all attributes in the query could be mapped to tables by
   * the mapper, otherwise false.
   */
  private boolean selectClause( StringBuffer buf, ColumnMapper mapper ) throws InvalidQueryException {

    final int nAttributes = query.getAttributes().length;

    if ( nAttributes==0 ) throw new InvalidQueryException("No attributes selected.");
    
    buf.append( "SELECT " );

    for( int i=0; i<nAttributes; ++i ) {

      Attribute a = query.getAttributes()[i];
      String colName = a.getName();
      
      if ( !mapper.canMap( colName ) ) return false;
      buf.append( mapper.qualifiedName( colName ) );
      
      if ( i+1 < nAttributes ) buf.append( ", " );
    }

    return true;
  }


  /**
   * Builds array of "from" tables by looking at all the columns mentioned in
   * the queries attributes and filters.
   *
   * @return true if all attributes and filter 'columns' in the query could
   * be mapped to tables by the mapper, otherwise false.
   */
  private boolean fromClause( StringBuffer buf, ColumnMapper mapper ) throws InvalidQueryException {

    Set relevantTables = new HashSet();
    
    for(int i=0; i<query.getAttributes().length; ++i) {
      String colName = query.getAttributes()[i].getName();
      if ( !mapper.canMap( colName ) ) return false;
      relevantTables.add( mapper.tableName( colName ) );
    }

    for(int i=0; i<query.getFilters().length; ++i) {
      String colName = query.getFilters()[i].getType();
      if ( !mapper.canMap( colName ) ) return false;
      relevantTables.add( mapper.tableName( colName ) );
    }

    fromTables = new String[ relevantTables.size() ];
    relevantTables.toArray( fromTables );

    buf.append( " FROM " );
    for( int i=0; i<fromTables.length; ++i) {
      if ( i>0 ) buf.append( " , " ); 
      buf.append( fromTables[i] );
    }

    return true;
  }
  

  /**
   * @return true if all filter condition 'columns' in the query could be mapped to tables by
   * the mapper, otherwise false.
   */
  private boolean whereClause( StringBuffer buf, ColumnMapper mapper ) throws InvalidQueryException {

    final int nFilters = query.getFilters().length;

    if ( nFilters>0 || fromTables.length>1 )
      buf.append( " WHERE " );
    
    boolean and = false;

    // Add user defined filters to where clause
    if ( nFilters!=0 ) {
      
      for( int i=0; i<nFilters; ++i ) {

        Filter f = query.getFilters()[i];
        String colName = f.getType();
        // don't need this next check because already checked in "fromClause"
        // but leave incase this method is ever called without calling that
        // method previously.
        if ( !mapper.canMap( colName ) ) return false; 

        if ( and ) buf.append( " AND " );
        colName = mapper.qualifiedName( colName );
        buf.append( colName ).append( f.getRightHandClause() ).append( " " );
        and = true;
      }

    }

    // Add joins to where clause
    if ( fromTables.length>1 ) {
      
      String joinKey = "." + query.getFocus() + "_id";
      String centralTable = fromTables[0];

      // Join from (first) central table to dimenstion tables.
      for(int i=1; i<fromTables.length; i++) {

        if ( and ) buf.append( " AND " );
        and = true;

        buf.append( centralTable ).append( joinKey )
          .append( "=").append( fromTables[i] ).append( joinKey );
      }
    }
    
    return true;
  }

  
  
  private String sql;
  private Query query;
  private Engine engine;
  private Logger logger = Logger.getLogger(CompiledSQLQuery.class.getName());
  private String baseTableName = null;
  private String[] fromTables;
  private ColumnMapper[] mappers;
}
