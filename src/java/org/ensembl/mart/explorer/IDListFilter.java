/* Generated by Together */

/*
    Copyright (C) 2003 EBI, GRL

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */

package org.ensembl.mart.explorer;
import java.io.*;
import java.net.*;
import java.util.*;

/**
 * IDListFilter object for storing a list of IDs of a particular
 * type to restrict Queries on.  IDListFilter objects can be
 * created on a single id (if you are only going to add one id,
 * you should just use a BasicFilter object instead, this one is more
 * useful for the MartExplorerTool to add multiple ids in succession),
 * a String[] of ids, a File of ids, a URL of ids, or
 * an InputStream of ids.
 * 
 * @author <a href="mailto:craig@ebi.ac.uk">Craig Melsopp</a>
 * @author <a href="mailto:dlondon@ebi.ac.uk">Darin London</a>
 */
public class IDListFilter implements Filter {

	/**
	 * Copy constructor.  Doesnt actually read the input that was originally provided,
	 * as this has already been parsed. Creates a 
	 * new IDListFilter(String Field, String[] identifiers) using the identifiers 
	 * provided by the original input.
	 * 
	 * @param o - an IDListFilter object
	 */
	public IDListFilter(IDListFilter o) {
		if (o.getName() != null)
			name = o.getName();

		int olen = o.getIdentifiers().length;
		String[] nvalues = new String[olen];

		if (olen > 0) {
			String[] ovalues = o.getIdentifiers();
			for (int i = 0; i < olen; i++) {
				identifiers.add(ovalues[i]);
			}
		}
	}

	/**
	 * Constructor for an IDListFilter object of a given field name
	 * with a single identifier.
	 * Other identifiers can be added later with addIdentifier.
	 *  
	 * @param String name = field name
	 * @param String identifier
	 */
	public IDListFilter(String name, String identifier) {
		this.name = name;
		identifiers.add(identifier);
	}

	/**
	 * Construct an IDListFilter object of a given field name on a String[] List of 
	 * identifiers.
	 * 
	 * @param String name - field name
	 * @param String[] identifiers
	 */
	public IDListFilter(String name, String[] identifiers) {
		this.name = name;
		this.identifiers = Arrays.asList(identifiers);
	}

	/**
	 * Construct an IDListFilter object of a given field name from a file
	 * containing identifiers. Expect one identifier per line.
	 * 
	 * @param String name - field name
	 * @param File file
	 * @throws IOException
	 */
	public IDListFilter(String name, File file) throws IOException {
		this(name, new InputStreamReader(file.toURL().openStream()));
	}

	/**
	 * Construct an IDListFilter object of a given field name 
	 * from a specified URL object containing identifiers. 
	 * Expect one identifier per line of file.
	 * 
	 * @param String name - field name
	 * @param URL url
	 * @throws IOException
	 */
	public IDListFilter(String name, URL url) throws IOException {
		this(name, new InputStreamReader(url.openStream()));
	}

	/**
	 * Construct an IDListFilter of a given field name from an InputStreamReader
	 * containing identifiers. Expect one identifier per line of Stream.
	 * Useful for piping martexplorer output into a new martexplorer as a filter
	 * 
	 * @param String name - field name
	 * @param InputStreamReader instream
	 * @throws IOException
	 */
	public IDListFilter(String name, InputStreamReader instream) throws IOException {
		this.name = name;

		// load entries from instream into identifiers array
		BufferedReader in = new BufferedReader(instream);

		for (String line = in.readLine(); line != null; line = in.readLine())
			identifiers.add(line);
	}

	/**
	  * add an identifier to the IDListFilter
	  * 
	  * @param String identifier
	  */
	public void addIdentifier(String identifier) {
		if (!identifiers.contains(identifier))
			identifiers.add(identifier);
	}

	/**
	 * returns the Where Clause for the SQL
	 * 
	 * @return String where clause 'IN (quoted list of identifiers)'
	 */
	public String getWhereClause() {
		StringBuffer buf = new StringBuffer();
		buf.append(name).append(" IN (");
		for (int i = 0, n = identifiers.size(); i < n; i++) {
			String element = (String) identifiers.get(i);
			if (i > 0)
				buf.append(", ");
			buf.append("\"").append(element).append("\"");
		}

		buf.append(" ) ");
		return buf.toString();
	}

	/**
	 * same as getWhereClause()
	 */
	public String getRightHandClause() {
		StringBuffer buf = new StringBuffer();
		buf.append(" IN (");
		for (int i = 0, n = identifiers.size(); i < n; i++) {
			String element = (String) identifiers.get(i);
			if (i > 0)
				buf.append(", ");
			buf.append("\"").append(element).append("\"");
		}
		buf.append(" ) ");
		return buf.toString();
	}

	/**
	 * get the String[] List of identifiers
	 * 
	 * @return String[] identifiers
	 */
	public String[] getIdentifiers() {
		String[] ret = new String[identifiers.size()];
		identifiers.toArray(ret);
		return ret;
	}

	/**
	 * get the Name of the IDListFilter
	 * 
	 * @return String name
	 */
	public String getName() {
		return name;
	}

	/**
	 * set the Name of the IDListFilter
	 * 
	 * @param String name of the filter
	 */
	public void setName(String name) {
		this.name = name;
	}

	public String getValue() {
		return null;
	}

	public void setTableConstraint(String tableConstraint) {
		this.tableConstraint = tableConstraint;
	}

	public String getTableConstraint() {
		return tableConstraint;
	}

	/**
	 * returns a description of the object useful for logging systems.
	 * 
	 * @return String description(field=field,identifiers=list of identifiers)
	 */
	public String toString() {
		StringBuffer buf = new StringBuffer();

		buf.append("[");
		buf.append(" field=").append(name);
		buf.append(", tableConstraint=").append(tableConstraint);
		buf.append(", identifiers=").append(identifiers);
		buf.append("]");

		return buf.toString();
	}

	/**
	 * Allows Equality Comparisons manipulation of IDListFilter objects
	 */
	public boolean equals(Object o) {
		return o instanceof IDListFilter && hashCode() == ((IDListFilter) o).hashCode();
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	public int hashCode() {
		int tmp = name.hashCode();
		tmp = (31 * tmp) + tableConstraint.hashCode();

		for (int i = 0, n = identifiers.size(); i < n; i++) {
			String element = (String) identifiers.get(i);
			tmp = (31 * tmp) + element.hashCode();
		}

		return tmp;
	}

	private String name, tableConstraint;
	private List identifiers = new ArrayList();
}
