/* Generated by Together */

/*
    Copyright (C) 2003 EBI, GRL

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
 */
 
package org.ensembl.mart.explorer;
import java.io.*;
import java.net.*;
import java.util.*;

/**
 * IDListFilter object for storing a list of IDs of a particular
 * type to restrict Queries on.  IDListFilter objects can be
 * created on a String[] of ids, a File of ids, a URL of ids, or
 * an InputStream of ids.
 * 
 * @author <a href="mailto:craig@ebi.ac.uk">Craig Melsopp</a>
 * @author <a href="mailto:dlondon@ebi.ac.uk">Darin London</a>
 */
public class IDListFilter implements Filter {

  /**
   * enum over modes of id list input. extend as necessary
   */
  public final static int STRING_MODE = 0;
  public final static int FILE_MODE = 1;
  public final static int URL_MODE = 2;
  public final static int STREAM_MODE = 3;


    /**
     * returns the Mode of this IDListFilter (STRING_MODE, FILE_MODE, URL_MODE, or STREAM_MODE)
     * @return int
     */
    public int getMode() {
        return mode;
    }

    /**
     * Construct an IDListFilter object of a given type on a String[] List of 
     * identifiers. Sets the mode to STRING_MODE.
     * 
     * @param String field
     * @param String[] identifiers
     */
    public IDListFilter(String field, String[] identifiers) {
      this.type = field;
      this.identifiers = identifiers;
      mode = STRING_MODE;
    }

    /**
     * Construct an IDListFilter object of a given type from a file
     * containing identifiers. Expect one identifier per line.
     * Sets mode to FILE_MODE.
     * 
     * @param String field
     * @param File file
     * @throws IOException
     */
    public IDListFilter(String field, File file) throws IOException {
      this( field, file.toURL() );
      this.file = file;
      mode = FILE_MODE;
    }

    /**
     * Construct an IDListFilter object of a given type 
     * from a specified URL object containing identifiers. 
     * Expect one identifier per line of file.
     * Sets mode to URL_MODE
     * 
     * @param String field
     * @param URL url
     * @throws IOException
     */
    public IDListFilter(String field, URL url) throws IOException {
      this.type = field;
      this.url = url;
      mode = URL_MODE;
      // load entries from file into identifiers array
      BufferedReader in = new BufferedReader( new InputStreamReader( url.openStream() ) );
      List lines = new ArrayList();
      for( String line = in.readLine(); line!=null; line = in.readLine() )
        lines.add( line );
      identifiers = new String[ lines.size() ];
      lines.toArray( identifiers );
    }

    /**
     * Construct an IDListFilter of a given type from an InputStreamReader
     * containing identifiers. Expect one identifier per line of Stream.
     * Useful for piping martexplorer output into a new martexplorer as a filter
     * sets mode to STREAM_MODE
     * 
     * @param String field
     * @param InputStreamReader instream
     * @throws IOException
     */
    public IDListFilter(String field, InputStreamReader instream) throws IOException {
      this.type = field;
      this.instream = instream;
      mode = STREAM_MODE;

      // load entries from instream into identifiers array
      BufferedReader in = new BufferedReader( instream );
      List lines = new ArrayList();
      for( String line = in.readLine(); line!=null; line = in.readLine() )
        lines.add( line );
      identifiers = new String[ lines.size() ];
      lines.toArray( identifiers );
    }

    public IDListFilter() {
    }

    /**
     * add an identifier to the IDListFilter
     * 
     * @param String identifier
     */
    public void addIdentifier(String identifier) {
        String[] tmp = identifiers;
        identifiers = new String[ tmp.length+1 ];
        System.arraycopy(tmp, 0, identifiers, 0, tmp.length);
        identifiers[ tmp.length ] = identifier;
    }

    /**
     * returns a description of the object useful for logging systems.
     * 
     * @return String description(field=field,identifiers=list of identifiers)
     */
    public String toString() {
        StringBuffer buf = new StringBuffer();

	    buf.append("[");
        buf.append(" field=").append( type);
        buf.append(", #identifiers=").append( identifiers.length);
        buf.append("]");

        return buf.toString();
    }

    /**
     * returns the Where Clause for the SQL
     * 
     * @return String where clause 'IN (quoted list of identifiers)'
     */
    public String getWhereClause(){
      StringBuffer buf = new StringBuffer();
      buf.append( type).append( " IN (");
      for(int i=0; i<identifiers.length; ++i ) {
        if ( i>0 ) buf.append( ", " );
        buf.append("\"").append( identifiers[i] ).append("\"");
      }
      buf.append( " ) " );
      return buf.toString();
    }

    /**
     * same as getWhereClause()
     */
    public String getRightHandClause() {
        StringBuffer buf = new StringBuffer();
        buf.append( " IN (");
        for(int i=0; i<identifiers.length; ++i ) {
            if ( i>0 ) buf.append( ", " );
                buf.append("\"").append( identifiers[i] ).append("\"");
        }
        buf.append( " ) " );
        return buf.toString();
    }


    /**
     * get the String[] List of identifiers
     * 
     * @return String[] identifiers
     */
    public String[] getIdentifiers(){ return identifiers; }

    /**
     * get the type of the IDListFilter
     * 
     * @return String type
     */
    public String getType(){
        return type;
    }

    /**
     * set the type of the IDListFilter
     * 
     * @param String type
     */
    public void setType(String type){ this.type = type; }

    /**
     * get the File with the IDListFilter identifiers
     * 
     * @return File file
     */
    public File getFile(){
        return file;
    }

    /**
     * set the File with the IDListFilter identifiers
     * 
     * @param File file
     */
    public void setFile(File file){ this.file = file; }
  
    /**
     * get the URL with the IDListFilter identifiers
     * 
     * @return URL url
     */
    public URL getUrl(){
        return url;
    }

    /**
     * set the URL with the IDListFilter identifiers
     * 
     * @param URL url
     */
    public void setUrl(URL url){ this.url = url; }

    public String getValue() {
      return null;
    }
  
    private String type;
    private String[] identifiers = new String[0];
    private File file;
    private URL url;
    private InputStreamReader instream;
    private int mode;
}
