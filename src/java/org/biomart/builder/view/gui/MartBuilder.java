/*
 * MartBuilder.java
 *
 * Created on 10 April 2006, 15:15
 */

package org.biomart.builder.view.gui;

import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.biomart.builder.controller.SchemaSaver;
import org.biomart.builder.model.Schema;
import org.biomart.builder.resources.BuilderBundle;

/**
 * GUI mostly auto-generated by NetBeans 5.0.
 * @author Richard Holland <holland@ebi.ac.uk>
 * @version 0.1.2, 5th April 2006
 * @since 0.1
 */
public class MartBuilder extends JFrame {
    /**
     * Internal reference to the schema we're working with.
     */
    private Schema schema;
    
    /**
     * Has anything been modified?
     */
    private boolean modifiedState;
    
    /**
     * Creates new form MartBuilder.
     * Initialises an empty schema.
     * Updates the form title.
     * Makes the file boxes accept only *.xml files.
     */
    public MartBuilder() {
        initComponents();
        this.schema = new Schema();
        this.setModifiedState(false);
        fileChooser.setFileFilter(new FileFilter() {
            public boolean accept(File f) {
                //if it is a directory -- we want to show it so return true.
                if (f.isDirectory())
                    return true;
                
                //check to see if the extension is equal to "html" or "htm"
                if (getExtension(f).equals("xml")) return true;
                
                //default -- fall through.
                return false;
            }
            
            public String getDescription() {
                return BuilderBundle.getString("XMLFileFilterDescription");
            }
            
            private String getExtension(File f) {
                String s = f.getName();
                int i = s.lastIndexOf('.');
                if (i > 0 &&  i < s.length() - 1)
                    return s.substring(i+1).toLowerCase();
                return "";
            }
        });
    }
    
    /**
     * Updates the title to reflect the modified state.
     * @param modifiedState true to indicate unsaved changes, false otherwise.
     */
    private void setModifiedState(boolean modifiedState) {
        this.modifiedState = modifiedState;
        this.setTitle(BuilderBundle.getString("GUITitle", new String[]{SchemaSaver.DTD_VERSION, this.modifiedState?BuilderBundle.getString("GUIModified"):""}));
    }
    
    /**
     * Displays an exception stack trace.
     * @param throwable the exception to display.
     */
    private void displayThrowable(Throwable throwable) {
        // What kind of message is it?
        int messageClass = (throwable instanceof Error)?JOptionPane.ERROR_MESSAGE:JOptionPane.WARNING_MESSAGE;
        // Format the stack trace into a string.
        StringWriter sw = new StringWriter();
        throwable.printStackTrace(new PrintWriter(sw));
        // Display the message.
        JOptionPane.showMessageDialog(this,
                sw.toString(),
                "Error",
                messageClass);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        fileChooser = new javax.swing.JFileChooser();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        separator = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();

        fileChooser.setBackground(java.awt.Color.white);
        fileChooser.setCurrentDirectory(new java.io.File("/home/holland"));
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        getContentPane().setLayout(new java.awt.CardLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("mainWindow");
        fileMenu.setMnemonic('f');
        fileMenu.setText("File");
        openMenuItem.setMnemonic('l');
        openMenuItem.setText("Load schema...");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save schema...");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveMenuItem);

        fileMenu.add(separator);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed
    
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // Show open dialog; this method does not return until the dialog is closed
        fileChooser.showOpenDialog(this);
        File selFile = fileChooser.getSelectedFile();
        if (selFile==null) return;
        try {
            // Attempt to load the schema.
            this.schema = SchemaSaver.load(selFile);
            // TODO: Update the display to match.
        } catch (Throwable t) {
            this.displayThrowable(t);
        }
    }//GEN-LAST:event_openMenuItemActionPerformed
    
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // Show open dialog; this method does not return until the dialog is closed
        fileChooser.showSaveDialog(this);
        File selFile = fileChooser.getSelectedFile();
        if (selFile==null) return;
        try {
            // Attempt to save the schema.
            SchemaSaver.save(this.schema, selFile);
            // Reset the modified state.
            this.setModifiedState(false);
        } catch (Throwable t) {
            this.displayThrowable(t);
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Create a MartBuilder.
                MartBuilder mb = new MartBuilder();
                // Display it.
                mb.setSize(400, 400);
                mb.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JSeparator separator;
    // End of variables declaration//GEN-END:variables
    
}
