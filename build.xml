<?xml version="1.0"?>

<!--

  Ant build file for the mart-explorer tree.

  see:
  <a href="http://jakarta.apache.org/ant">Ant Project Homepage</a>
  <a href="http://home.wxs.nl/~ajkuiper/ant.html">Ant User Manual</a>
  <a href="http://jakarta.apache.org/builds/tomcat/nightly/ant.zip">Download</a>

  targets:

    run ant -projecthelp to see list of targets.


  dependencies:
    
    junit.jar             needed to run regression tests
    xalan.jar             needed to make html regression test results
    optional.jar          needed for ant to use junit.ar and xalan.jar
                          (should be in ANT_HOME/lib)

  author:  Michael Heuer, modified by Keith James (JUnit support), modified
           Greg Cox (fixed documentation), modified by Craig Melsopp
           (configured for ensembl-java project and then mart-explorer.)
  version: $Id$

  portions Copyright (c) 1999-2000 The Apache Software Foundation.

-->

<project default="compile" basedir=".">


  <property name="name" value="mart-explorer" />
  <property name="version" value="0.01" />
  <property name="build.name" value="${name}-${version}" />
  <property name="build.compiler" value="modern" />
  <property name="build.deprecation" value="false" />

  <!-- Save the current system classpath to pass to forked VMs -->
  <property name="env.classpath" value="${java.class.path}" />
  <property name="readme" value="./README" />
  <property name="license" value="./LICENSE" />
  <property name="install" value="./INSTALL" />
  <property name="buildfile" value="./build.xml" />
  <property name="src.dir" value="./src/java" />
  <property name="data.dir" value="./data" />
  <property name="manifest.file" value="${data.dir}/defaultmanifest.txt" />
  <property name="packages" value="org.*" />
  <property name="bin.dir" value="./bin" />
  <property name="lib.dir" value="./lib" />
  <property name="docs.dir" value="./docs" />
  <property name="api.dir" value="${docs.dir}/api" /> 

  <property name="build.dir" value="./build" />
  <property name="build.classes" value="${build.dir}/classes" />
  <property name="reports.dir" value="./reports" />
  <property name="reports.tests" value="${reports.dir}/tests" />
  <property name="dist.root" value="./dist" />
  <property name="dist.dir" value="${dist.root}/${build.name}"    />

  <!-- classpath set to include jars -->
  <fileset id="lib.classpath" dir="${lib.dir}" includes= "*.jar"/>

  <!-- Prepend library files to front of classpath -->
  <property name="build.classpath" value="last"/>



  <target name="init">

    <tstamp >
      <format property="TODAY_UK" pattern="yyyy-MM-d-HH-mm" locale="en"/>
      <format property="TODAY_UK_LONG" pattern="d MMM yyyy H:mm a" locale="en"/>
      <format property="TODAY_TIME" pattern="HH-mm" locale="en"/>
    </tstamp>

  </target>



  <target name="all" depends="clean, jar, api, dist"
  description="Cleans, compiles and creates distribution files.">

  </target>

  <!-- Creates directories for build and dist. -->
  <target name="prepare">
    <mkdir dir="${api.dir}" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${build.classes}" />
    <mkdir dir="${dist.root}" />
    <mkdir dir="${dist.dir}" />
    
    <mkdir dir="${reports.dir}" />
    <mkdir dir="${reports.tests}" />
  </target>



  <target name="clean" 
   description="Removes generated directories and files.">

    <delete dir="${api.dir}" />

    <delete dir="${build.dir}" />
    <delete dir="${dist.root}" />
    <delete dir="${reports.dir}" />

  </target>





  <!-- Compiles the source directory -->
  <target name="compile" depends="prepare"
   description="Compiles java files."
  >

    <javac
      srcdir="${src.dir}"
      destdir="${build.classes}"
      deprecation="${build.deprecation}"
      depend="no"
      debug="true"
    >
      <classpath>
        <fileset refid="lib.classpath"/>
      </classpath>
    </javac>
  </target>



  <!-- Checks that whole of cvs module compiles with just it's
  contents and the available jar files. 

  Exports contents of cvs module before compiling "src/" to
  "classes/". Relies on all supporting jars being available in
  "${lib.dir}". The classpath is set to empty to avoid accidentally
  using previously compiled classes or source files.

  Tricks to get javac to ignore classpath: (1)
  build.sysclasspath=ignore, (2) javac.classpath=dest

  -->
  <target name="export-build" 
  description="Performs a fresh, temporary, cvs check-out and compiles.">

    <property name="package" value="mart-explorer" />
    <property name="destination" value="/tmp" />
    <property name="root" value="${destination}/${package}" />
    <property name="build.sysclasspath" value="ignore"/>

    <delete dir="${root}"/>
    
    <echo message="================================"/>
    <echo message="ENTER CVS PASSWORD IF NEEDED ..."/>

    <cvs command="-q export -D tomorrow" package="${package}" dest="${destination}" />


    <mkdir dir="${root}/classes" />
    

    <javac
      srcdir="${root}/src"
      classpath="${root}/classes"
      destdir="${root}/classes"
      extdirs="${lib.dir}"
      deprecation="false"
      depend="no"
      debug="true"
    />

  </target>



  <target name="jar" depends="compile"
  description="Creates mart-explorer.jar in 'build' directory."
  >

    <jar
      jarfile="${build.dir}/${name}.jar"
      basedir="${build.classes}"
      manifest="${manifest.file}"
      includes="org/**">
      <fileset dir=".">
        <include name="data/**" />
        <include name="src/jython/martexplorer/*.py" />
        <exclude name="*~" />
        <exclude name="**/CVS/**" />
        <exclude name="**/*Test*" />
      </fileset>
    </jar>


  </target>






  <!-- Runs tests if the Ant optional JUnit support is available -->
  <target name="test" depends="init, compile"
   description="Runs regression tests and produces html output."
  >

    <junit printsummary="yes" haltonfailure="no" dir="${reports.tests}">
      <formatter type="xml" />

      <classpath>
        <pathelement path=".:${build.classes}" />
        <fileset refid="lib.classpath" />
      </classpath>

      <!-- The junit task doesn't support 'if' so we test for JUnit here -->
      <batchtest fork="yes" todir="${reports.tests}">
        <fileset dir="${build.classes}">
          <include name="**/*Test*" />
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${reports.tests}">
      <fileset dir="${reports.tests}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${reports.tests}/html"/>
    </junitreport>

  </target>



  <!-- fills dist directory tree -->
  <target name="prepare-dist" depends="jar, api">

    <copy todir="${dist.dir}/lib" >
      <fileset refid="lib.classpath"/>
    </copy>

    <copy file="${readme}" todir="${dist.dir}" />
    <copy file="${license}" todir="${dist.dir}" />
    <copy file="${install}" todir="${dist.dir}" />
    <copy file="${buildfile}" todir="${dist.dir}" />

    <copy todir="${dist.dir}/src">
      <fileset  dir="${src.dir}" >
        <exclude name="**/*.dfPackage"/>
        <exclude name="**/?akefile"/>
        <exclude name="**/*.tpr"/>
        <exclude name="**/*.tws"/>
        <exclude name="**/TAGS"/>
        <exclude name="**/CVS/**"/>
      </fileset>

    </copy>

    <copy file="${build.dir}/${name}.jar" todir="${dist.dir}/lib" />

    <copy todir="${dist.dir}/docs" >
        <fileset dir="${docs.dir}" />
    </copy>

    <copy todir="${dist.dir}/bin" >
        <fileset dir="${bin.dir}" />
    </copy>
    
  </target>



  <target name="dist" depends="prepare-dist" 
   description="Build files for distribution." >

    <tar tarfile="${build.dir}/${name}.tar" basedir="${dist.root}" includes="**" />
    <gzip zipfile="${build.dir}/${name}.tgz" src="${build.dir}/${name}.tar" />
    <delete file="${build.dir}/${name}.tar"/>
    <zip zipfile="${build.dir}/${name}.zip" basedir="${dist.dir}" includes="**" />

  </target>



  <target name="api" depends="prepare" 
   description="Build javadocs.">

    <javadoc 
     sourcepath="${src.dir}"
     packagenames="org.ensembl.mart.explorer
	     ,org.ensembl.mart.explorer.gui"
     destdir="${api.dir}"
     author="true"
     version="true"
     use="true"
     windowtitle="MartExplorer API"
     doctitle="MartExplorer API" >

     <classpath>
       <pathelement path="${build.classes}" />
       <fileset refid="lib.classpath" />
     </classpath>

    </javadoc>    

    <!-- insert some magic at the top of each javadoc page to prevent
       the ensembl website from processing it and adding page borders. -->
    <replace token="&lt;!DOCTYPE" 
	     value="&lt;!--#set var=&quot;decor&quot; value=&quot;none&quot;--&gt;&lt;!DOCTYPE"
	     dir="${api.dir}">
	 <include name="**/*.html"/>
    </replace>

  </target>



</project>



