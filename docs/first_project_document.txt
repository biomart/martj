This is the original document describing MartExplorer. It contains an
introduction, use cases and provisional specification and design
notes.

30th Jan 2003.


INTRODUCTION
------------

MartExplorer will enable significant integration of end user's data
and programs with genomic data stored in Ensembl Mart.

It will provide a graphical user interface based on the successful
MartView web site and will also support a commandline interface making
it suitable for scripting.

Using MartExplorer it will be easy to construct queries against Mart
databases that contain user defined data. Other programs or
datasources could also be used to filter the data. Several export
formats will be available.

The application will be written in java and include a library that
will be useful to 3rd party developers wishing to integrate Mart with
their own programs.

Although MartExplorer could be used to access remote databases the
most common use is expected to be providing access to local /
inhouse databases and to integrate with 3rd party tools. Unlike
MartView it will not require a webserver for local installation.

Below are MartExplorer's use cases (example uses) and some initial
specification and design notes.



USE CASES
---------

Filtering and exporting existing Mart data
------------------------------------------

MartExplorer will replicate all functionality currently available
through MartView.


Adding 3rd party data to mart
-----------------------------

Imagine a user has drug target data associated with various genes. She
would like to integrate this with Mart so that the drug target
information could be used for filtering and exporting alongside basic
Mart data. By adding a satelite table containing the data it will
automatically become available in MartExplorer.


Using MartExplorer Application from a script
--------------------------------------------

Because MartExplorer can be used from the command line it can be
included in a script.


Using MartExplorer library
--------------------------

Imagine a user has a clustering tool for micro array data analysis and
would like to see the chromosome, chromosome position, pfam ID and
upstream sequence for each of the genes produced by a particular
analysis. By using the MartExplorer library the tool can easily
retrieve the genomic data.


Plugging 3rd party filters into MartExplorer
--------------------------------------------

Another option for integrating MartExplorer with 3rd party programs is
to make the relationship MartExplorer centric. A plugin could be added
to MartExplorer enabling it to use the other program as a Filter. The
plugin could communicate with the other program by a variety of
mechanisms including file sharing, CORBA, SOAP, custom protocol over
TCP/IP sockets, or http for webservices. Simpler plugins could also be
used for loading filter data from files.


Possible Use Case: Peer to peer communications
----------------------------------------------

Yet another way to make MartExplorer interact with other programs
would be via peer to peer communications. Rather than writing specific
code to integrate the two programs they could both implement a common
remote interface and lookup mechanism. In this approach the two
programs could even be Plug'n'Play comaptible; they could
automatically find each other using the lookup mechanism before
conversing via the remote interfaces. CORBA and SOAP would be good
options for the underlying communications mechanism.



Possible related project: Getting java objects out of Mart
----------------------------------------------------------

MartExplorer will not return objects other than ResultSets and
Streams. If your application requires domain specific objects such as
genes and exons then a different type of library would be more
useful. Something like ensj.

Ensj is a Java API for Ensembl that includes a framework for binding
to different databases. There is currently a binding to standard
Ensembl databases (ensj-core) and a similar binding (ensj-mart) could
be implemented to provide object based representations of Mart
data. This would, for example, make it possible to retrieve fully
populated object graphs such as all the genes with transcripts,
translations and exons from a particular genomic region. The
infrasturcure for this library is already in place and only requires
the implementation of a few adaptors. Due to Mart's denormalized
character ensj-mart would be much faster than ensj-core.



INITIAL SPECIFICATION NOTES
---------------------------

MartExplorer will:

-Include all functionality offered by MartView. See MartView webite.

-Produce optimimum SQL queries. At least as good as those created by
MartView.

-Handle the addition of new tables by end users. Some constraints on
table and column naming may be necessary.

-Be flexible enough to incorporate realistic schema changes.

-Run in command line mode. It can be used from shell (at least bash
and tcsh) and inside scripts.

-Support 3rd party program filters.

-Support filter conditions loaded from files.

-Support interactive query building via a GUI.

-GUI will include a results viewer that supports viewing hyperlinks to
ensembl web pages via a web browser

-Input options should only be available where sensible (GUI based
interfaces) and input values should be validated where possible.

-Be easy to install and run.

-Be easy to use.



INITIAL DESIGN NOTES
--------------------

MartExplorer Application architecure
------------------------------------

The architure uses the common "3 tier" pattern:

   User Interface <-> Application core <-> Database


User Interface:

     This provides the user with the ability to choose a database,
     set filters and set attributes. Two are currently planned:

     1 - Graphical User Interface (GUI): A Swing based GUI will be
     developed for application and applet implementations.

     2 - Command line interface. Typical unix style command line
     parameter format will be supported.

     Other potential deployment scenarios include a web front end
     (jsp/servlet), webservice, or J2EE session bean. These would
     require either wrapping the application core with a new
     interface or more likely writing a fresh program using the
     library.

Application core:

       This will provide a query validation service to the user
       interface and execute queries returning results via the
       selected renderer. It will mostly be built from library
       components.


Database:

   A Mart database with standard data and optionaly user created
   and populated satelite tables.


Library
-------

Key datatypes:

     - Query. Represents a single query which is a set of filters
     and attributes to be included in the exported data set.

     - Filter. Represents a filter condition such as "must be on
     chromosome 1" or "start position >= 3m bases". Filters will be
     implemented for standard mart database tables and extension
     satelite tables. Data in the extension tables should
     automatically be made available for filtering where
     appropriate. Custom filters, such as those based on 3rd party
     tools and files, should also be possible.

     - Attribute. Specifies a category of data to be included in
     results such as "ensembl gene name", "PFam ID" and "peptide
     sequence". Columns from user added tables should automatically
     become available in the GUI for inclusion where appropriate.


QueryEngine:

   - Query validation. Can the query be compiled to sql?

   - Compile Queries into SQL.

   - Executing the sql and return the results in particular
     formats using a renderer.

   - Executes a query to find the number of focus objects
         returned.

   - Executes a query to find the number of rows returned.

   - Renderers. The engine will use Renderers to converts the
       ResultSets to a useful format, e.g. FASTARenderer,
       CSVRenderer. These will be base on output streams for maximum
       flexibility.

   - Use JDBC to make connections to the database to execute the sql
   and use Renderers to process the java.sql.ResultSets.