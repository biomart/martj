getSequenceUsage=\n\t< sequence sequence_request (see 'help sequence' for further details) >

sequence=usage: sequence <l+>name_of_sequence<+r> \
                \n  request sequences, optionally with flanking sequences \
                \n  (note, some sequences are not flankable). \
                \n    l denotes the amount of upstream (left) flanking sequence to include in the sequence, \
                \n    r denotes the amount of downstream (right) flanking sequence to include.\
                \n\n  sequence_name must match the name of a sequence available from the system \
                \n  (see the javadoc SequenceDescription documentation for more information). \
                \n\n  examples: \
                \n\n\tsequence 100+gene_exons+100 \
                \n\t  gets all exons on a given gene, with 100 bp upstream flanking \
                \n\t  and downstream sequence added to each exon.\
                \n\n\tsequence transcript_flanks+100 \
                \n\t  gets 100 bp of downstream flanking sequence for each transcript. \n

sequenceUsage:\n\n  get sequence type; -- returns sequences of type for every gene in the \
                \n  mart. \
              \n\n  get sequence type_U2000 where filt; -- returns sequence of type for \
                \n  each gene, with its upstream sequence extended by 2000bp, satisfying \
                \n  the filter criterion. \
              \n\n  get xref_swissprot_id sequence type_D2000 where filt1, filt2; -- gets \
                \n  sequences of type for meeting the filter criteria, with downstream \
                \n  sequence extended by 2000bp, adding the swissprot display id, either \
                \n  as a field in tabulated output, or in the description of the header \
                \n  in fasta output.\n

sequenceExample:\n  get xref_swissprot_id sequence peptide where disease_genes excluded; \
                \n  get sequence gene_exons_U2000_D2000; \n

Marker=usage: filter_name = marker_name \
       \n\n  Marker filters require a valid marker_name.\n

Band=usage: filter_name = band_name \
     \n\n  Band filters require a valid band_name.\n

Encode=usage: filter_name = chr_number:start_bp:end_bp \
       \n\n  Encode filters must include a valid location definition set by the \
         \n  Encode group.\n

Qtl=usage: filter_name = chr_number:start_bp:end_bp \
    \n\n  QTL filters must include a valid location definition for a QTL.\n

Expression=usage: filter_name = x=y<,x=y>* \
           \n\n  Expression filters must include one or more comma separated key=value pairs. \
             \n    key must be a valid EVOC category (anatomical_site, development_stage, pathology, cell_type) \
             \n    value must be a valid EVOC term associated with the corresponding EVOC category.\n
