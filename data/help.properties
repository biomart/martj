intro=\n  MartShell is an Interactive User Interface to Mart based on MartQuery Language (MQL). \
        INSERT:CommandHistoryHelp \
        INSERT:CommandCompletionHelp \
        \n\n  type 'help' for a list of available commands, or type 'help command' \
          \n  to get help for a particular command. \
        \n\n  The system has a 'describe' command to display datasets, \
          \n  attributes, or filters of the mart being querried \
          \n  (see 'help describe' for further information).\n
MQLintro=\n  Mart Query Language commands are designed to resemble human-readable \
          \n  english sentences (for more information on MQL type 'help MQL').\
          \n  Some example MQL commands: \
        \n\n\tget ensembl_gene_id; \
        \n\t  This requires that a DatasetView, and possibly a DataSource \
        \n\t  be set using a previous 'use' command \
        \n\t  (see 'help use' for information), or the -d switch to the Shell. \
        \n\t  It would return all of the ensembl_gene_id entries for the DatasetView \
        \n\t  previously set with the 'use' command or -d switch. \
        \n\n\tusing homo_sapiens_ensembl_genes get ensembl_gene_id where disease_genes exclusive;\
        \n\t  This command would get all ensembl_gene_ids for homo_sapiens_ensembl_genes \
        \n\t  disease genes, temporarily over riding the DatasetView set with a previous \
        \n\t  'use' command' for the duration of the individual query. \
        \n\n  MQL statements can be written entirely on one line, or split across \
          \n  separate lines, with spacing to make the more complex commands easier \
          \n  to read. \
        \n  There can be multiple MQL statements on a single line, separated by \
        \n  semicolons (most useful when passing commands at the commandline \
        \n  using -e).\n
usage=\n  add DataSource < key=value<, key=value> <as DataSourceName >>; -- \
      \n  Creates a DataSource, with optional connection parameters and reference name. \
      \n  If connection parameters are specified, but no as statement is included, defaults \
      \n  to instanceName@host.  If no connection parameters / name is provided,  and the \
      \n  mode is interactive, the shell querries the user for information to create a Mart \
      \n  DataSource, which can be used to execute mart querries against. \
      \n  see help add for more information. \
    \n\n  add DatasetViews from URL|path|DataSourceName; -- adds all DatasetViews \
      \n  provided by the MartRegistry.dtd compliant XML file/URL, or, from \
      \n  the mart system referenced by the DataSourceName. see help add \
      \n  for more information. \
    \n\n  add DatasetView URL|Path; -- adds a Dataset.dtd compliant XML document \
      \n  file/URL to the system. see help add for more information. \
    \n\n  remove DataSource DataSourceName; -- removes the DataSource, and any DatasetViews \
      \n  that have loaded from it. see help remove for more information. \
    \n\n  remove DatasetViews <from URL|path|DataSourceName>; -- removes all DatasetViews \
      \n  that have been loaded from the given MartRegistry.dtd compliant XML document File \
      \n  or URL, or from the given Mart Service that DataSourceName uses. If no URL|path, \
      \n  or DataSourceName is provided, all DatasetViews will be removed. \
      \n  see help remove for more information. \
    \n\n  remove DatasetView name -- removes the given DatasetView from the System. \
      \n  see help remove for more information. \
    \n\n  remove procedureName -- removes the given Named Procedure (see help MQL for \
      \n  information on Named Procedures) from the shell environment. see help \
      \n  remove for more information. \
    \n\n  list DatasetViews; -- lists all DatasetViews loaded. see help FilterList for more information. \
    \n\n  list filters; -- lists all filters from the current environmental DatasetView. \
      \n  if no DatasetView has been 'used' returns an error. see help FilterList for more information. \
    \n\n  list attributes; -- lists all filters from the current environmental DatasetView. \
      \n  if no DatasetView has been 'used' returns an error.  see help FilterList for more information. \
    \n\n  list procedures; -- lists all Named Procedures that have been stored. see help \
      \n  list for more information. \
    \n\n  list DataSources; -- lists all DataSources that have been added with the add DataSource \
      \n  command.  see help FilterList for more information. \
    \n\n  update DatasetVies <from URL|path|DataSourceName>; -- updates all DatasetViews from the given \
      \n  URL|path|DataSourceName, adding any new or modified DatasetViews that are specified from these \
      \n  sources.  If no URL|Path|DataSourceName is specified, all DatasetView sources will be updated. \
      \n  see help update for more information. \
      \n  update DatasetView name; -- updates a particular DatasetView from its source.  Note, if the \
      \n  source contains other DatasetViews, these will be added/updated as well. see help update \
      \n  for more information. \
    \n\n  set DataSource name <DatasetViewName>; -- sets the DataSource to use for Mart Querries. \
      \n  if no DatasetView name is specified, this sets the environmental DataSource (over riding \
      \n  any DataSource specified in a 'use' command), else, the DataSource for the specific DatasetView \
      \n  is set.  see help set for more information. \
    \n\n  set prompt 'anything'; -- resets the MartShell main prompt (not the command-continuation prompt) to \
      \n  a user specified prompt which resolves to 'anything >'; see help set for more information. \
    \n\n  set output <format = 'x'><, file = 'y' <, separator='z'>>>; -- sets the \
      \n  format, file, and/or the output separator to use for all querries run \
      \n  within the session, until another set output command is run. All values \
      \n  must be enclosed in single quotes. \
      \n  If no format, file, or separator setting is provided, and the system is in \
      \n  interactive mode, the user is prompted for information. See 'help set for more \
      \n  information. \
    \n\n  set verbose (on|off); -- if a logging Configuration URL has not been specified, this sets \
      \n  the system verbosity (debugging information). see help set for more information. \
    \n\n  unset DataSource DatasetViewName; -- if a DataSource has been set for a specific DatasetView, \
      \n  it is unset. see help unset for more information. \
    \n\n  unset prompt; -- sets the default prompt. \
    \n\n  unset output (file|format|separator); -- sets all output settings, or the given output setting \
      \n  to their default settings. \
    \n\n  unset verbose; -- sets verbose to the default setting (which will most likely be off). \
    \n\n  describe DatasetView name; -- describes the given DatasetView. \
      \n  See 'help describe' for more information. \
    \n\n  describe filter name; -- describes the given filter from the environmental DatasetView. \
      \n  If no DatasetView has been 'use'd, an error is thrown.  see help describe for more \
      \n  information. \
    \n\n  describe attribute name; -- describes the given attribute from the environmental DatasetView. \
      \n  If no DatasetView has been 'use'd, an error is thrown.  see help describe for more \
      \n  information. \
    \n\n  describe procedure name; -- prints the MQL for the given procedure. \
      \n  see help describe for more information. \
    \n\n  environment DataSource; -- prints out information on the environmental DataSource \
      \n  specified with either use of set DataSource. see help environment for more details. \
    \n\n  environment output (File|Format|Separator); -- shows the current output settings \
      \n  optionally for a specific output setting. see help environment formore information. \
    \n\n  environment DatasetView -- prints the name of the environmental DatasetView \
      \n  specified in a use command. \
    \n\n  use DatasetViewName; -- sets the DatasetView to use for the session, or until \
      \n  another use statement is executed.  See 'help use' for more \
      \n  information.\
    \n\n  use DatasetViewName>DataSourceName; -- sets both the DatasetView and DataSource to use \
      \n  for the session.  The DataSource can be overridden with another call to use, or with \
      \n  a call to set DataSource.  see help use for more information. \
    \n\n  get att; -- get a single attribute, for all focus objects in the \
      \n  DatasetView specified in the use DatasetView command (if no DatasetView is set, \
      \n  an error is thrown). See 'help get' for more information. \
    \n\n  get att1, att2; -- get two attributes for all focus objects in the \
      \n  specified DatasetView. \
    \n\n  get att1 where filter1; -- get attribute for focus objects that fit \
      \n  a specified filter criterion. \
    \n\n  get att1 where filter1, filter2; -- same, with multiple filter \
      \n  criteria. \
    \n\n  using DatasetViewname<>DataSourceName> get att; -- A using clause placed at \
      \n  the beginning of any MQL statement overrides the DatasetView, and optional DataSource \
      \n provided in a use/set DataSource command for the duration of this specific query. \
    DOMAINSPECIFIC:sequenceUsage \
    INSERT:COMPLETIONUSAGE \n
examples=\n  set output format='fasta',file='myfile.txt'; \
         \n  addDataSource host=dbhost.somewhere.com,user=me,password=mypass,instanceName=myFavoriteMartian as myDataSource; \
         \n  use homo_sapiens_ensembl_genes; \
         \n  use homo_sapiens_ensembl_genes>myDataSource; \
         \n  get ensembl_gene_id; \
         \n  get ensembl_gene_id, ensembl_transcript_id where disease_genes exclusive; \
         \n  using homo_sapiens_ensembl_genes get ensembl_gene_id; \
         \n  using homo_sapiens_ensembl_genes>myDataSource get ensembl_gene_id; \
         DOMAINSPECIFIC:sequenceExample \
         \n
describe=usage: describe type name; \
        \n\n  type can be one of: \
          \n    - DatasetView: describes the filters and attributes available in \
          \n       the named DatasetView.  \
          \n    - filter: describes the named filter from the environmental DatasetView. \
          \n        Prints an error if no DatasetView is set with the use command, \
          \n        or the filter_name is not found.\
          \n    - attribute: same as filter, but describes the given attribute. \
          \n    - procedure: prints the MQL for a Named Procedure. \n
set=usage: set type <parameters>; \
      \n\n type can be one of: \
        \n    - DataSource: must be followed by a DataSourceName, sets the environmental DataSource. \
        \n       this can only be overridden with a call to set DataSource, unset DataSource, or use. \
        \n       If an optional DatasetViewName is provided, sets the DataSource for that DatasetView \
        \n       only. \
        \n    - prompt: sets the main prompt (not the continuation prompt) to a user specified string. \
        \n       The string must be enclosed in quotes. Actually resolves to 'userString >'. \
        \n    - output: values are optional, but, if provided, must consist of one or \
        \n       more key = value pairs.  Keys must be either format, file, or separator. \
        \n       if no optional parameters are passed, the user is prompted for all \
        \n       possible settings to override for the session, with indications of defaults available. \
        \n       If any key = value parameters are passed, only these settings are overridden for the \
        \n       session. \
        \n    - verbose: values must be either 'on' or 'off'.  If no logging configuration URL was \
        \n       provided at shell startup, this turns verbosity (debug output) on, or off. \n
unset=usage:unset type <paramters>; \
        \n\n type can be one of: \
          \n  - DataSource: Unsets the environmental DataSource, or, if a DatasetViewName is provided \
          \n     as a parameter, unsets the DataSource for the given DatasetView. \
          \n  - prompt: sets the main Prompt to the default 'MartShell >'. \
          \n  - output: parameters are optional, but, if present, must be one of File, Format, or Separator. \
          \n     sets all, or a specified output setting to its default (STDOUT for File, Tabulated for Format, \
          \n     tab for Separator. \
          \n  - verbose: sets verbose output (debug information) to the default (off) position, unless a logging \
          \n     system configuration file has been specified, whereby an error is thrown. \
          \n
add=usage: add type <parameters>; \
       \n\n type can be one of: \
         \n   - DataSource: parameters are optional, but must consist of one or more key = value pairs. \
         \n     followed by an optional 'as userSpecifiedName' parameter which sets the name used to refer \
         \n     to this DataSource in other Shell commands (defaults to instanceName@host). \
         \n     keys can be one of: \
         \n       * host: sets the RDBMS host \
         \n       * port: sets the RDBMS port. Defaults to 3306 for mysql. \
         \n       * user: sets the RDBMS user \
         \n       * password: sets the RDBMS password (note, passwords are not encrypted). \
         \n       * instanceName: sets the name of the Mart Database Instance to query. \
         \n       * databaseType: sets the type of RDBMS server. \
         \n       * jdbcDriver: sets the name of the Java JDBC Driver class to use to manage \
         \n           JDBC connections. Note, if both databaseType and jdbcDriver are left blank, \
         \n           type 'mysql', and driver 'com.mysql.jdbc.Driver' are used, respectively. \
       \n\n  If no key=value pairs are entered during an interactive session, the \
         \n  user is prompted interactively for this information. If it is in batch mode and \
         \n  no key=value pairs are entered, an error is thrown. \
         \n
remove=usage: remove type <parameters>; \
       \n\n type can be one of: \
         \n    - DataSource: parameter must be the refering name set with the add command, or the default. \
         \n       list DataSources will show all DataSources loaded. \
         \n    - DatasetViews: paramaters are optional, but, if present, must be of the form 'from path|URL|DataSourceName' \
         \n       for a source of DatasetViews.  If no parameters are passed, all DatasetViews are removed.  If \
         \n       a parameter is passed, the DatasetView(s) loaded from the given source is(are) removed. \
         \n    - DatasetView: parameter must be the name of a loaded DatasetView (use 'list DatasetViews'). \
         \n       removes this particular DatasetView from the Shell. \
         \n
update=usage: update type <parameters>; \
        \n\n  type can be one of: \
          \n    - DatasetViews: parameters are optional, but, if present, must be of the form 'from URL|Path|DataSourceName'. \
          \n       updates the DatasetView(s) loaded from the given source, or all DataSources, if no parameters are \
          \n       supplied. \
          \n    - DatasetView: parameter must be provided, and must be the name of a loaded DatasetView. \
          \n       updates the DatasetView. Note, all DatasetView objects provided by the source for the \
          \n       specified DatasetView are updated as well. \n
list=usage: list type; \
      \n\n  type can be one of: \
        \n    - DatasetViews: lists all DatasetViews loaded. \
        \n    - Filters: lists all filters, in alphabetical order, for the environmental DatasetView, \
        \n        or throws an error if no DatasetView has been 'use'd. \
        \n    - Attributes: lists Attributes, in alphabetical order, for the environmental DatasetView, \
        \n        or throws an error if no DatasetView has been 'use'd. \
        \n    - Procedures: lists the names of any Named Procedures that have been loaded. \
        \n    - DataSources: lists the names of all DataSources loaded with the add DataSource command. \n
execute=usage: execute type <parameter>: \
            \n\n type can be one of: \
              \n  - history: parameter must be of the form <n><,><y>. \
              \n     Executes the requested line ('exec n'), or series of lines ('exec n,y') \
              \n     and adds them to the history.  See 'help history' for information on \
              \n     the n,y system of denoting line numbers. \
              \n     executes lines 3 to 5, inclusive. \
              \n     Note, previous exec commands are ignored, to prevent infinite loops.\
              \n  - procedure: parameter must be the name of a Named Procedure, optionally \
              \n     followed immediately by any bind variable expansions surrounded by parentheses. \
              \n     eg. exec procedure mystuff; vs exec procedure mystuff(variable1,variable2). \
              \n
environment=usage: environment <type <parameters>>; \
            \n\n Prints information all, or a specified part, of the shell environment. \
              \n If not type/parameters are passed, prints all environment settings. \
              \n type can be one of: \
              \n  - DataSource: prints the DataSource connection information (not the name, but the \
              \n     server connection settings. \
              \n  - output: parameters are optional, but must be one of File, Format, or Separator, if \
              \n     present.  Prints all, or a specified part, of the current environmental \
              \n     output settings. \
              \n  - DatasetView: prints the name of the current environmental DatasetView. \
              \n
runScript=usage: runScript path_to_your_file_goes_here \
                 \n\n  Runs the querries in a script file in sequence, adding the lines to \
                   \n  the history \
                 \n\nexample: \
                 \n\trunScript myScript.mql; \
                 \n\t  executes all statements in the file myScript.mql, adding \
                 \n\t  them to the history.\n
loadScript=usage: loadScript path_to_your_file_goes_here \
                  \n\n  Loads the lines from a script into the history without executing them,\
                    \n  making them avialble for commandline editing. \
                  \n\nexamples: \
                  \n\tloadScript myScript.mql; \
                  \n\t  loads the commands in myScript.mql to your history.\n
saveToScript=usage: saveToScript <n><,><y> path_to_recieving_file \
                    \n\n  Stores all lines ('saveToScript path') or a series of lines ('saveToScript n,y path') \
                      \n  into a script file. See 'help history' for information on the n,y \
                      \n  system of denoting line numbers. \
                    \n\nexamples: \
                    \n\tsaveToScript 3,5 newScript.txt; \
                    \n\t  saves lines 3 to 5, inclusive, into newScript.txt.\n
history=usage: history <n><,><y> \
               \n\n  show all history ('history'), or one or more lines from the history. \
               \n   n denotes the number of the first line to include. \
               \n   y denotes the number of the last line to include. \
               \n  Either (but not both) can be blank, eg., 'n,' means all lines from n \
               \n  to the end of the history while ',y' means all lines from the beginning \
               \n  of the history to line y.\
               \n\nexamples: \
               \n\thistory 3,5; \
               \n\t\tshows lines 3 to 5, inclusive, from the history.\
               \n\n\thistory 3,; \
               \n\t\tshows all history lines, starting from line 3.\
               \n\n\thistory ,5;\
               \n\t\tshows all history lines up to, including, line 5.\n
using=usage: \n\tusing DatasetView_name<>DataSourceName> \
           \n\tget \
           \n\t< attribute_list > \
           DOMAINSPECIFIC:getSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\n  The using clause is optional, but, if it is not present, a DatasetView must \
             \n  have been set with the 'use' command, or the -d switch to the Shell. \
             \n  DatasetView_name must match the name of a DatasetView provided by the MartConfiguration system.\
           \n\n  attribute_list is a comma-separated list of mart attributes.  These \
             \n  must match the internal_name of attributes in the MartConfiguration for \
             \n  the mart being querried (use 'describe' to get information on the names \
             \n  of MartConfiguration elements). attribute_list can be omitted for \
             \n  sequence_requests, otherwise, at least one attribute must be specified. \
             \n  Specifying attributes with a sequence_request requests that those \
             \n  attributes (if available) are included, either as fields in tabulated \
             \n  output or in the description portion of the header in fasta output. \
           \n\n  filter_list is a comma separated list of Filter Requests. \
             \n  See 'help FilterRequest' for information on the format for specifying \
             \n  filters in the where clause. \
           \n\n  if a limit request is specified, this adds a limit integer clause to \
             \n  the actual SQL executed against the mart database.  Note that this \
             \n  does not necessarily limit the number of records returned to the \
             \n  specified integer.  It limits the number of mart focus objects querried, \
             \n  for which attributes are returned. If there is a one-many, many-many, \
             \n  or many-one relationship between the mart focus object, and the \
             \n  attribute being requested, then the number of records returned will \
             \n  reflect this. \
           \n\n  examples: \
           \n\tselect ensembl_gene_id from homo_sapiens_ensembl_genes; \
           \n\t  returns all ensembl_gene_ids provided by homo_sapiens_ensembl_genes. \
           \n\n\tselect sequence peptide \
           \n\tfrom homo_sapiens_ensembl_genes \
           \n\twhere ensembl_gene_id in (select human_homologue_ensembl_gene_id \
           \n\t\t\t\t  from mus_musculus_ensembl_genes \
           \n\t\t\t\t  where human_upstream_conserved_regions exclusive), \
           \n\t  disease_genes exclusive; \
           \n\tselects peptide sequences for genes that are homologous with \
           \n\tmouse genes, further limiting the mouse genes to those having \
           \n\thuman upstream conserved regions, and further limiting the \
           \n\thuman genes to disease genes. \
           \n\n\tselect ensembl_transcript_id from homo_sapiens_ensembl_genes where ensembl_family_id in myFamilyIds.txt, \
           \n\t hugo_id_xrefs exclusive; \
           \n\tselects all human ensembl transcript stable ids which map the \
           \n\tthe ensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\tand which have hugo references.\n
get=usage: \n\t<using DatasetView_name<>DataSourceName>> \
           \n\tget \
           \n\t< attribute_list > \
           DOMAINSPECIFIC:getSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\n  The using clause is optional, but, if it is not present, a DatasetView must \
             \n  have been set with the 'use' command, or the -d switch to the Shell. \
             \n  DatasetView_name must match the name of a DatasetView provided by the MartConfiguration system.\
           \n\n  attribute_list is a comma-separated list of mart attributes.  These \
             \n  must match the internal_name of attributes in the MartConfiguration for \
             \n  the mart being querried (use 'describe' to get information on the names \
             \n  of MartConfiguration elements). attribute_list can be omitted for \
             \n  sequence_requests, otherwise, at least one attribute must be specified. \
             \n  Specifying attributes with a sequence_request requests that those \
             \n  attributes (if available) are included, either as fields in tabulated \
             \n  output or in the description portion of the header in fasta output. \
           \n\n  filter_list is a comma separated list of Filter Requests. \
             \n  See 'help FilterRequest' for information on the format for specifying \
             \n  filters in the where clause. \
           \n\n  if a limit request is specified, this adds a limit integer clause to \
             \n  the actual SQL executed against the mart database.  Note that this \
             \n  does not necessarily limit the number of records returned to the \
             \n  specified integer.  It limits the number of mart focus objects querried, \
             \n  for which attributes are returned. If there is a one-many, many-many, \
             \n  or many-one relationship between the mart focus object, and the \
             \n  attribute being requested, then the number of records returned will \
             \n  reflect this. \
           \n\n  examples: \
           \n\tselect ensembl_gene_id from homo_sapiens_ensembl_genes; \
           \n\t  returns all ensembl_gene_ids provided by homo_sapiens_ensembl_genes. \
           \n\n\tselect sequence peptide \
           \n\tfrom homo_sapiens_ensembl_genes \
           \n\twhere ensembl_gene_id in (select human_homologue_ensembl_gene_id \
           \n\t\t\t\t  from mus_musculus_ensembl_genes \
           \n\t\t\t\t  where human_upstream_conserved_regions exclusive), \
           \n\t  disease_genes exclusive; \
           \n\tselects peptide sequences for genes that are homologous with \
           \n\tmouse genes, further limiting the mouse genes to those having \
           \n\thuman upstream conserved regions, and further limiting the \
           \n\thuman genes to disease genes.\
           \n\n\tselect ensembl_transcript_id from homo_sapiens_ensembl_genes where ensembl_family_id in myFamilyIds.txt, \
           \n\t hugo_id_xrefs exclusive; \
           \n\tselects all human ensembl transcript stable ids which map the \
           \n\tthe ensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\tand which have hugo references.\n
MQL=usage: \n\t<using DatasetView_name<>DataSourceName>> \
           \n\tget \
           \n\t< attribute_list > \
           DOMAINSPECIFIC:getSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\n  The using clause is optional, but, if it is not present, a DatasetView must \
             \n  have been set with the 'use' command, or the -d switch to the Shell. \
             \n  DatasetView_name must match the name of a DatasetView provided by the MartConfiguration system. \
           \n\n  attribute_list is a comma-separated list of mart attributes.  These \
             \n  must match the internal_name of attributes in the MartConfiguration for \
             \n  the mart being querried (use 'describe' to get information on the names \
             \n  of MartConfiguration elements). attribute_list can be omitted for \
             \n  sequence_requests, otherwise, at least one attribute must be specified. \
             \n  Specifying attributes with a sequence_request requests that those \
             \n  attributes (if available) are included, either as fields in tabulated \
             \n  output or in the description portion of the header in fasta output. \
           \n\n  filter_list is a comma separated list of Filter Requests. \
             \n  See 'help FilterRequest' for information on the format for specifying \
             \n  filters in the where clause. \
           \n\n  if a limit request is specified, this adds a limit integer clause to \
             \n  the actual SQL executed against the mart database.  Note that this \
             \n  does not necessarily limit the number of records returned to the \
             \n  specified integer.  It limits the number of mart focus objects querried, \
             \n  for which attributes are returned. If there is a one-many, many-many, \
             \n  or many-one relationship between the mart focus object, and the \
             \n  attribute being requested, then the number of records returned will \
             \n  reflect this. \
           \n\n  examples: \
           \n\tselect ensembl_gene_id from homo_sapiens_ensembl_genes; \
           \n\t  returns all ensembl_gene_ids provided by homo_sapiens_ensembl_genes. \
           \n\n\tselect sequence peptide \
           \n\tfrom homo_sapiens_ensembl_genes \
           \n\twhere ensembl_gene_id in (select human_homologue_ensembl_gene_id \
           \n\t\t\t\t  from mus_musculus_ensembl_genes \
           \n\t\t\t\t  where human_upstream_conserved_regions exclusive), \
           \n\t  disease_genes exclusive; \
           \n\tselects peptide sequences for genes that are homologous with \
           \n\tmouse genes, further limiting the mouse genes to those having \
           \n\thuman upstream conserved regions, and further limiting the \
           \n\thuman genes to disease genes. \
           \n\n\tselect ensembl_transcript_id from homo_sapiens_ensembl_genes where ensembl_family_id in myFamilyIds.txt, \
           \n\t hugo_id_xrefs exclusive; \
           \n\tselects all human ensembl transcript stable ids which map the \
           \n\tthe ensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\tand which have hugo references.\n
FilterRequest=usage: filter_name qualifier <value> \
                     \n\n  Filters must be in one of the following formats: \
                     \n\t- filter_name excluded|exclusive  -- specifies that objects \
                     \n\t  should be returned only if they match (exclusive), or only \
                     \n\t  if they do not match (excluded) this filter. This format is \
                     \n\t  only applicable to boolean and boolean_num type filters. \
                     \n\n\t- filter_name =|!=|>|>=|<|<= value \
                     \n\n\t- filter_name in list (see 'help FilterList' for further information) \
                     \n\n  filter_name must match the internal_name for a filter specified in \
                       \n  the MartConfiguration for the mart being querried. \
                       \n  When the filter is part of a filter_set (as specified in the MartConfiguration \
                       \n  System), the filter_name must be further qualified with a filter_set_name \
                       \n  (see 'help FilterSet' for further information). \
                     \n\n  examples: \
                     \n\n\tdisease_genes exclusive \
                     \n\t\tspecifies that only genes that are known disease_genes should be returned. \
                     \n\n\tensembl_gene_id = ENSG0000001 \
                     \n\t\t(Note, no quoting is required.)  Only get Information for this one gene. \n
FilterSet=usage: filter_set_name.filter_name qualifier <value> \
                 \n\n  The filter_name for filters in collections belonging to a FilterSet \
                   \n  must be further qualified with a filter_set_name separated from the \
                   \n  filter_name with a period. \
                 \n\n  example: \
                 \n\n\tensembl_gene.coding_snps exclusive \
                 \n\t\tspecifies that only snps that are coding_snps in ensembl genes should be returned.\n
FilterList=usage:  filter_name in list \
             \n\nlist requests must be in one of the following formats: \
             \n\t -filter_name in path|url - path/url must point to some \
             \n\t  resource with ids matching the filter_name, one per line \
             \n\t -filter_name in (comma_separated_list of ids matching filter_name). \
             \n\t  Note, the list must be enclosed in perentheses, but no quoting \
             \n\t  is required \
             \n\t -filter_name in (NestedQuery).  See 'help NestedQuery' for details.\
             \n\t  Note, the NestedQuery must be enclosed with perentheses. \
             \n\n  examples: \
             \n\n\tensembl_gene_id in myGeneIds.txt \
             \n\t\tonly return genes that match the gene_ids in the file myGenes.txt. \
             \n\n\tensembl_gene_id in (ENSG0000000001, ENSG0000000002, ENSG00000003) \
             \n\t\tonly return genes matching the ensembl_gene_ids in the list.\n
NestedQuery=usage: filter_name in (query) \
                  \n\n  Nested Queries must meet the requirements of a full query \
                    \n  (see 'help MQL' for details), along with the following constraints: \
                  \n\t -They must only return one attribute, and values returned by \
                  \n\t  that attribute must be applicable to the filter_name provided \
                  \n\t  in the filter request. \
                  \n\t -They cannot include a sequence request \
                  \n\t -Currently, only one level of nesting is allowed \
                  \n\t  (eg., a NestedQuery cannot include another NestedQuery filter). \
                  \n\n  example: \
                  \n\n\tensembl_gene_id in (select human_homologue_ensembl_gene_id from mus_musculus_ensembl_genes) \
                  \n\t\tonly returns genes with gene_ids matching the ids for genes homologous with mouse.\n
use=usage: use DatasetView_name<>DataSourceName> \
           \n\n  This sets the environmental DatasetView, and optionally the DataSource, for subsequent querries.  \
             \n This DatasetView can only be over ridden with a 'using' clause in the MQL, or with a subsequent \
             \n  call to 'use'. The DataSource can be overridded with the same, or with a set DataSource command.\n
