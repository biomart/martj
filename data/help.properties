startUp=MartShell: An Interactive User Interface to Mart based on Mart Query Language (MQL) \
        \ntype 'help' for a list of available commands, or type 'help command' to get help for a particular command.

intro=\n  MartShell is an Interactive User Interface to Mart based on MartQuery Language (MQL). \
        INSERT:CommandHistoryHelp \
        INSERT:CommandCompletionHelp \
        \n\n  type 'help' for a list of available commands, or type 'help command' \
          \n  to get help for a particular command. \
        \n\n  The system has a 'describe' command to display datasets, \
          \n  attributes, or filters of the mart being querried \
          \n  (see 'help describe' for further information). \n

MQLintro=\n  Mart Query Language commands are designed to resemble human-readable \
          \n  english sentences (for more information on MQL type 'help MQL').  \
          \n  Some example MQL commands: \
        \n\n\tget ensembl_gene_id; \
        \n\t  This requires that a dataset be set using a previous 'use' command \
        \n\t  (see 'help use' for information), or the -d switch to the Shell. \
        \n\t  It would return all of the ensembl_gene_id entries for the dataset \
        \n\t  previously set with the 'use' command or -d switch. \
        \n\n\tusing homo_sapiens_ensembl_genes get ensembl_gene_id where disease_genes exclusive; \
        \n\t  This command would get all ensembl_gene_ids for homo_sapiens_ensembl_genes \
        \n\t  disease genes, temporarily over riding the Dataset set with a previous \
        \n\t  'use' command' for the duration of the individual query. \
        \n\n  MQL statements can be written entirely on one line, or split across \
          \n  separate lines, with spacing to make the more complex commands easier \
          \n  to read. \
        \n  There can be multiple MQL statements on a single line, separated by \
        \n  semicolons (most useful when passing commands at the commandline \
        \n  using -e).\n

usage=\n  setOutputSettings <format=x><, file=y <, separator=z>>>; -- sets the \
      \n  format, file, and/or the output separator to use for all querries run \
      \n  within the session, until another setOutputSettings command is run. \
      \n  See 'help setOutputSettings for more information. \
    \n\n  showOutputSettings; -- shows the current settings. \
    \n\n  setConnectionSettings <key=value<,key=value>*>; -- sets one or more \
      \n  connection setting keys, and re-connects to the new mart RDBMS. \
      \n  If no key-value pairs are provided in an interactive shell session, \
      \n  an interactive dialogue is commenced. See help setConnectionSettings \
      \n  for more information. \
    \n\n  describe name; -- name can be for a filter, or an attribute. \
      \n  See 'help describe' for more information. \
    \n\n  show datasets|filters|attributes; -- shows a list of either datasets, \
      \n  filters from the current dataset, or attributes from the current \
      \n  dataset \
    \n\n  use datasetname; -- sets the dataset to use for the session, or until \
      \n  another use statement is executed.  See 'help use' for more \
      \n  information.\
    \n\n  get att; -- get a single attribute, for all focus objects in the \
      \n  dataset specified in the use dataset command (if no dataset is not \
      \n  set, an error is thrown). See 'help get' for more information. \
    \n\n  get att1, att2; -- get two attributes for all focus objects in the \
      \n  specified dataset. \
    \n\n  get att1 where filter1; -- get attribute for focus objects that fit \
      \n  a specified filter criterion. \
    \n\n  get att1 where filter1, filter2; -- same, with multiple filter \
      \n  criteria. \
    \n\n  using datasetname get att; -- A using clause placed at the beginning \
      \n  of any MQL statement overrides the dataset provided in a use command, \
      \n  for the duration of this specific query. \
    DOMAINSPECIFIC:sequenceUsage \
    INSERT:COMPLETIONUSAGE
    \n

examples=\n  setOutputSettings format=fasta,file=myfile.txt; \
         \n  setConnectionSettings host=dbhost.somewhere.com,user=me,password=mypass,databaseName=myFavoriteMartian; \
         \n  use homo_sapiens_ensembl_genes; \
         \n  get ensembl_gene_id; \
         \n  get ensembl_gene_id, ensembl_transcript_id where disease_genes exclusive; \
         \n  using homo_sapiens_ensembl_genes get ensembl_gene_id; \
         DOMAINSPECIFIC:sequenceExample \
         \n

COMPLETIONUSAGE=\n  use <tab> <tab> -- Hitting tab twice quickly in succession causes the \
                \n  system to display all available datasets. \
                \n\n  get <tab> <tab> -- same, but only potential attributes for the dataset \
                  \n  set in a use command are displayed. \
                \n\n  using datasetname get att1 where <tab> <tab> -- same, but only potential \
                  \n  filter names for the dataset in the using clause are displayed.\n

CommandHistoryHelp=\n\n  The Shell provides a command history system allowing you to type the up \
                   \n  arrow key to scroll through previous commands. It saves your history \
                   \n  between sessions. Use the 'history', 'exec', and 'saveToScript' \
                   \n  commands to manipulate your history in other ways \
                   \n  (see help for further details).

CommandCompletionHelp=\n\n  The Shell also provides advanced, context sensitive command completion. \
                      \n  Hitting the tab key once during a command will attempt to complete \
                      \n  what you are typing, or, given multiple possible completions, beep. \
                      \n  Hitting the tab key twice in succession causes the system to display \
                      \n  a list of possible completions available, based on the exact point \
                      \n  you are located in a command (in the case of MQL querries, even across \
                      \n  multiple lines).

describe=usage:describe dataset_name|filter_name|attribute_name \
       \n\n  If a dataset_name is provided, describes the filters and attributes \
         \n  available in that dataset.  If a filter_name or attribute_name is \
         \n  provided, describes the filter/attribute from the current dataset with \
         \n  that name.  Prints error if no dataset is set with the use command, \
         \n  or the dataset_name, filter_name, or attribute_name is not found.\n

setPrompt=usage: setPrompt string (use - to return to the default state: 'MartShell >'\n

setOutputSettings=usage: setOutputSettings x=y<,x=y>* \
                 \n\n  Sets one or more of the output settings for all querries during the \
                   \n  session. Over rides default values (file = stdout, format = tabulated, \
                   \n  separator = tab). Settings can then be changed with another call to \
                   \n  setOutputSettings, or with an into statement in a Query \
                   \n  At least one key=value parameter must be supplied, up to three may be \
                   \n  supplied separated by commas. \
                   \n\n  x  can be one of : \
                   \n\t- file (use '-' for stdout, or specify a valid path) \
                   \n\t- format (must be tabulated or fasta) \
                   \n\t- separator (use 'comma' for comma separated, otherwise, \
                   \n\t  provide a character to separate the fields) \
                 \n\n  This sets these settings for the entire shell session. \
                 \n\n  examples: \
                 \n\tsetOutputSettings file=mygenes.txt,format=tabulated,separator=comma; \
                 \n\t  sets the session wide file to mygenes.txt (all querries \
                 \n\t  will append to this file, until another call to \
                 \n\t  setOutputSettings file:) in tabulated comma separated format. \
                 \n\n\tsetOutputSettings format=fasta; \
                 \n\t  sets the output to fasta, leaving the file and separator \
                 \n\t  setting unchaged. \
                 \n\n\tsetOutputSettings format=tabulated,separator=	; \
                 \n\t  sets the output to tab separated, tabulated format, leaving \
                 \n\t  the file output unchanged. \n

setConnectionSettings=usage: setConnectionSettings <key=value<,key=value>*> \
                      \n\n  Sets the following connection settings: \
                      \n\tRDBMS host (key = host) \
                      \n\tRDBMS type (key = databaseType) \
                      \n\tRDBMS port (key = port) \
                      \n\tRDBMS user (key = user) \
                      \n\tRDBMS password (key = password) \
                      \n\tname of the mart database (key = databaseName) \
                      \n\tpath to alternate martConfiguration.xml document (key = alternateConfigurationFile) \
                      \n\n  If no key=value pairs are entered during an interactive session, the \
                        \n  user is presented a series of questions. If it is in batch mode and \
                        \n  no key=value pairs are entered, an error is thrown \
                      \n\n  examples: \
                      \n\tsetConnectionSettings host=kaka.sanger.ac.uk; \
                      \n\t  client will attempt to connect to the RDBMS running on kaka.sanger.ac.uk, \
                      \n\t  using the other connection settings as they were before. \
                      \n\n\tsetConnectionSettings host=localhost,port=3307,user=anonymous,databaseName=ensembl_mart_14_1; \
                      \n\t  client will attempt to connect to the RDBMS running on the \
                      \n\t  localhost, port 3307, using username anonymous (password \
                      \n\t  remains unchanged), and query the ensembl_mart_14_1 database. \
                      \n\n\tsetConnectionSettings alternateConfigurationFile=myConfigurationFile.xml; \
                      \n\t  all connection settings remain unchanged, but the system gets \
                      \n\t  its configuration information from the specified xml file. \
                      \n\t  Note, the default mode is to pull the configuration xml \
                      \n\t  information from the RDBMS. \n

setVerbose=usage: setVerbose on|off (on turns logging system output on, off turns it off)\n

exec=usage: exec <n><,><y>  \
            \n\n  Executes the requested line ('exec n'), or series of lines ('exec n,y') \
              \n  and adds them to the history.  See 'help history' for information on \
              \n  the n,y system of denoting line numbers. \
            \n\nexamples: \
            \n\texec 3,5; \
            \n\t  executes lines 3 to 5, inclusive. \
            \n\n  Note, previous exec commands are ignored, to prevent infinite loops.\n

runScript=usage: runScript path_to_your_file_goes_here \
                 \n\n  Runs the querries in a script file in sequence, adding the lines to \
                   \n  the history \
                 \n\nexample: \
                 \n\trunScript myScript.mql; \
                 \n\t  executes all statements in the file myScript.mql, adding \
                 \n\t  them to the history.\n

loadScript=usage: loadScript path_to_your_file_goes_here \
                  \n\n  Loads the lines from a script into the history without executing them,\
                    \n  making them avialble for commandline editing. \
                  \n\nexamples: \
                  \n\tloadScript myScript.mql; \
                  \n\t  loads the commands in myScript.mql to your history.\n

saveToScript=usage: saveToScript <n><,><y> path_to_recieving_file \
                    \n\n  Stores all lines ('saveToScript path') or a series of lines ('saveToScript n,y path') \
                      \n  into a script file. See 'help history' for information on the n,y \
                      \n  system of denoting line numbers. \
                    \n\nexamples: \
                    \n\tsaveToScript 3,5 newScript.txt; \
                    \n\t  saves lines 3 to 5, inclusive, into newScript.txt.\n

history=usage: history <n><,><y> \
               \n\n  show all history ('history'), or one or more lines from the history. \
               \n   n denotes the number of the first line to include. \
               \n   y denotes the number of the last line to include. \
               \n  Either (but not both) can be blank, eg., 'n,' means all lines from n \
               \n  to the end of the history while ',y' means all lines from the beginning \
               \n  of the history to line y. \
               \n\nexamples: \
               \n\thistory 3,5; \
               \n\t\tshows lines 3 to 5, inclusive, from the history. \
               \n\n\thistory 3,; \
               \n\t\tshows all history lines, starting from line 3. \
               \n\n\thistory ,5; \
               \n\t\tshows all history lines up to, including, line 5.\n

using=usage: \n\tusing dataset_name \
           \n\tget \
           \n\t< attribute_list > \
           DOMAINSPECIFIC:getSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\n  The using clause is optional, but, if it is not present, a dataset must \
             \n  have been set with the 'use' command, or the -d switch to the Shell. \
             \n  dataset_name must match the name of a dataset provided by the MartConfiguration system. \
           \n\n  attribute_list is a comma-separated list of mart attributes.  These \
             \n  must match the internal_name of attributes in the MartConfiguration for \
             \n  the mart being querried (use 'describe' to get information on the names \
             \n  of MartConfiguration elements). attribute_list can be omitted for \
             \n  sequence_requests, otherwise, at least one attribute must be specified. \
             \n  Specifying attributes with a sequence_request requests that those \
             \n  attributes (if available) are included, either as fields in tabulated \
             \n  output or in the description portion of the header in fasta output. \
           \n\n  filter_list is a comma separated list of Filter Requests. \
             \n  See 'help FilterRequest' for information on the format for specifying \
             \n  filters in the where clause. \
           \n\n  if a limit request is specified, this adds a limit integer clause to \
             \n  the actual SQL executed against the mart database.  Note that this \
             \n  does not necessarily limit the number of records returned to the \
             \n  specified integer.  It limits the number of mart focus objects querried, \
             \n  for which attributes are returned. If there is a one-many, many-many, \
             \n  or many-one relationship between the mart focus object, and the \
             \n  attribute being requested, then the number of records returned will \
             \n  reflect this. \
           \n\n  examples: \
           \n\tselect ensembl_gene_id from homo_sapiens_ensembl_genes; \
           \n\t  returns all ensembl_gene_ids provided by homo_sapiens_ensembl_genes. \
           \n\n\tselect sequence peptide \
           \n\tfrom homo_sapiens_ensembl_genes \
           \n\twhere ensembl_gene_id in (select human_homologue_ensembl_gene_id \
           \n\t\t\t\t  from mus_musculus_ensembl_genes \
           \n\t\t\t\t  where human_upstream_conserved_regions exclusive), \
           \n\t  disease_genes exclusive; \
           \n\tselects peptide sequences for genes that are homologous with \
           \n\tmouse genes, further limiting the mouse genes to those having \
           \n\thuman upstream conserved regions, and further limiting the \
           \n\thuman genes to disease genes. \
           \n\n\tselect ensembl_transcript_id from homo_sapiens_ensembl_genes where ensembl_family_id in myFamilyIds.txt, \
           \n\t hugo_id_xrefs exclusive; \
           \n\tselects all human ensembl transcript stable ids which map the \
           \n\tthe ensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\tand which have hugo references.\n  

get=usage: \n\t<using dataset_name> \
           \n\tget \
           \n\t< attribute_list > \
           DOMAINSPECIFIC:getSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\n  The using clause is optional, but, if it is not present, a dataset must \
             \n  have been set with the 'use' command, or the -d switch to the Shell. \
             \n  dataset_name must match the name of a dataset provided by the MartConfiguration system. \
           \n\n  attribute_list is a comma-separated list of mart attributes.  These \
             \n  must match the internal_name of attributes in the MartConfiguration for \
             \n  the mart being querried (use 'describe' to get information on the names \
             \n  of MartConfiguration elements). attribute_list can be omitted for \
             \n  sequence_requests, otherwise, at least one attribute must be specified. \
             \n  Specifying attributes with a sequence_request requests that those \
             \n  attributes (if available) are included, either as fields in tabulated \
             \n  output or in the description portion of the header in fasta output. \
           \n\n  filter_list is a comma separated list of Filter Requests. \
             \n  See 'help FilterRequest' for information on the format for specifying \
             \n  filters in the where clause. \
           \n\n  if a limit request is specified, this adds a limit integer clause to \
             \n  the actual SQL executed against the mart database.  Note that this \
             \n  does not necessarily limit the number of records returned to the \
             \n  specified integer.  It limits the number of mart focus objects querried, \
             \n  for which attributes are returned. If there is a one-many, many-many, \
             \n  or many-one relationship between the mart focus object, and the \
             \n  attribute being requested, then the number of records returned will \
             \n  reflect this. \
           \n\n  examples: \
           \n\tselect ensembl_gene_id from homo_sapiens_ensembl_genes; \
           \n\t  returns all ensembl_gene_ids provided by homo_sapiens_ensembl_genes. \
           \n\n\tselect sequence peptide \
           \n\tfrom homo_sapiens_ensembl_genes \
           \n\twhere ensembl_gene_id in (select human_homologue_ensembl_gene_id \
           \n\t\t\t\t  from mus_musculus_ensembl_genes \
           \n\t\t\t\t  where human_upstream_conserved_regions exclusive), \
           \n\t  disease_genes exclusive; \
           \n\tselects peptide sequences for genes that are homologous with \
           \n\tmouse genes, further limiting the mouse genes to those having \
           \n\thuman upstream conserved regions, and further limiting the \
           \n\thuman genes to disease genes. \
           \n\n\tselect ensembl_transcript_id from homo_sapiens_ensembl_genes where ensembl_family_id in myFamilyIds.txt, \
           \n\t hugo_id_xrefs exclusive; \
           \n\tselects all human ensembl transcript stable ids which map the \
           \n\tthe ensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\tand which have hugo references.\n

MQL=usage: \n\t<using dataset_name> \
           \n\tget \
           \n\t< attribute_list > \
           DOMAINSPECIFIC:getSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\n  The using clause is optional, but, if it is not present, a dataset must \
             \n  have been set with the 'use' command, or the -d switch to the Shell. \
             \n  dataset_name must match the name of a dataset provided by the MartConfiguration system. \
           \n\n  attribute_list is a comma-separated list of mart attributes.  These \
             \n  must match the internal_name of attributes in the MartConfiguration for \
             \n  the mart being querried (use 'describe' to get information on the names \
             \n  of MartConfiguration elements). attribute_list can be omitted for \
             \n  sequence_requests, otherwise, at least one attribute must be specified. \
             \n  Specifying attributes with a sequence_request requests that those \
             \n  attributes (if available) are included, either as fields in tabulated \
             \n  output or in the description portion of the header in fasta output. \
           \n\n  filter_list is a comma separated list of Filter Requests. \
             \n  See 'help FilterRequest' for information on the format for specifying \
             \n  filters in the where clause. \
           \n\n  if a limit request is specified, this adds a limit integer clause to \
             \n  the actual SQL executed against the mart database.  Note that this \
             \n  does not necessarily limit the number of records returned to the \
             \n  specified integer.  It limits the number of mart focus objects querried, \
             \n  for which attributes are returned. If there is a one-many, many-many, \
             \n  or many-one relationship between the mart focus object, and the \
             \n  attribute being requested, then the number of records returned will \
             \n  reflect this. \
           \n\n  examples: \
           \n\tselect ensembl_gene_id from homo_sapiens_ensembl_genes; \
           \n\t  returns all ensembl_gene_ids provided by homo_sapiens_ensembl_genes. \
           \n\n\tselect sequence peptide \
           \n\tfrom homo_sapiens_ensembl_genes \
           \n\twhere ensembl_gene_id in (select human_homologue_ensembl_gene_id \
           \n\t\t\t\t  from mus_musculus_ensembl_genes \
           \n\t\t\t\t  where human_upstream_conserved_regions exclusive), \
           \n\t  disease_genes exclusive; \
           \n\tselects peptide sequences for genes that are homologous with \
           \n\tmouse genes, further limiting the mouse genes to those having \
           \n\thuman upstream conserved regions, and further limiting the \
           \n\thuman genes to disease genes. \
           \n\n\tselect ensembl_transcript_id from homo_sapiens_ensembl_genes where ensembl_family_id in myFamilyIds.txt, \
           \n\t hugo_id_xrefs exclusive; \
           \n\tselects all human ensembl transcript stable ids which map the \
           \n\tthe ensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\tand which have hugo references.\n  

FilterRequest=usage: filter_name qualifier <value> \
                     \n\n  Filters must be in one of the following formats: \
                     \n\t- filter_name excluded|exclusive  -- specifies that objects \
                     \n\t  should be returned only if they match (exclusive), or only \
                     \n\t  if they do not match (excluded) this filter. This format is \
                     \n\t  only applicable to boolean and boolean_num type filters. \
                     \n\n\t- filter_name =|!=|>|>=|<|<= value \
                     \n\n\t- filter_name in list (see 'help list' for further information) \
                     \n\n  filter_name must match the internal_name for a filter specified in \
                       \n  the MartConfiguration for the mart being querried. 
                       \n  When the filter is part of a filter_set (as specified in the MartConfiguration \
                       \n  System), the filter_name must be further qualified with a filter_set_name \
                       \n  (see 'help FilterSet' for further information). \
                     \n\n  examples: \
                     \n\n\tdisease_genes exclusive \
                     \n\t\tspecifies that only genes that are known disease_genes should be returned. \
                     \n\n\tensembl_gene_id = ENSG0000001 \
                     \n\t\t(Note, no quoting is required.)  Only get Information for this one gene. \n

FilterSet=usage: filter_set_name.filter_name qualifier <value> \
                 \n\n  The filter_name for filters in collections belonging to a FilterSet \
                   \n  must be further qualified with a filter_set_name separated from the \
                   \n  filter_name with a period. \
                 \n\n  example: \
                 \n\n\tensembl_gene.coding_snps exclusive \
                 \n\t\tspecifies that only snps that are coding_snps in ensembl genes should be returned.\n

list=usage:  filter_name in list \
             \n\nlist requests must be in one of the following formats: \
             \n\t -filter_name in path|url - path/url must point to some \
             \n\t  resource with ids matching the filter_name, one per line \
             \n\t -filter_name in (comma_separated_list of ids matching filter_name). \
             \n\t  Note, the list must be enclosed in perentheses, but no quoting \
             \n\t  is required \
             \n\t -filter_name in (NestedQuery).  See 'help NestedQuery' for details.
             \n\t  Note, the NestedQuery must be enclosed with perentheses. \
             \n\n  examples: \
             \n\n\tensembl_gene_id in myGeneIds.txt \
             \n\t\tonly return genes that match the gene_ids in the file myGenes.txt. \
             \n\n\tensembl_gene_id in (ENSG0000000001, ENSG0000000002, ENSG00000003) \
             \n\t\tonly return genes matching the ensembl_gene_ids in the list.\n

NestedQuery=usage: filter_name in (query) \
                  \n\n  Nested Queries must meet the requirements of a full query \
                    \n  (see 'help MQL' for details), along with the following constraints: \
                  \n\t -They must only return one attribute, and values returned by \
                  \n\t  that attribute must be applicable to the filter_name provided \
                  \n\t  in the filter request. \
                  \n\t -They cannot include a sequence request \
                  \n\t -Currently, only one level of nesting is allowed \
                  \n\t  (eg., a NestedQuery cannot include another NestedQuery filter). \
                  \n\n  example: \
                  \n\n\tensembl_gene_id in (select human_homologue_ensembl_gene_id from mus_musculus_ensembl_genes) \
                  \n\t\tonly returns genes with gene_ids matching the ids for genes homologous with mouse.\n

use=usage: use dataset_name \
           \n\n  This sets the Dataset for subsequent querries.  This dataset can only \
             \n  be over ridden with a 'using' clause in the MQL, or with a subsequent \
             \n  call to 'use'. \n
