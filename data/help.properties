intro=\n  MartShell is an Interactive User Interface to Mart based on MartQuery Language (MQL). \
        INSERT:CommandHistoryHelp \
        INSERT:CommandCompletionHelp \
        \n\n  type 'help;' for a list of available commands, or type 'help command;' \
          \n  to get help for a particular command. \
        \n\n  The system has 'list' and 'describe' commands to display information about \
          \n  datasets, datasetviews, attributes, filters, Marts, and procedures that have \
          \n  been loaded (see 'help describe;' and 'help list;' for further information).\n
MQLintro=\n  Mart Query Language commands are designed to resemble human-readable \
          \n  english sentences (for more information on MQL type 'help MQL').\
          \n  Some example MQL commands: \
        \n\n\tget ensembl_gene_id; \
        \n\t  This requires that a Dataset, and possibly a Mart \
        \n\t  be set using a previous 'use' command \
        \n\t  (see 'help use;' for information), or the -d switch to the Shell. \
        \n\t  It would return all of the ensembl_gene_id entries for the Dataset \
        \n\t  previously set with the 'use' command or -d switch. \
        \n\n\tusing ensembl_genes_homo_sapiens get ensembl_gene_id where disease_genes only;\
        \n\t  This command would get all ensembl_gene_ids for ensembl_genes_homo_sapiens \
        \n\t  disease genes, temporarily over riding any Dataset set with a previous \
        \n\t  'use' command' for the duration of the individual query. \
        \n\n  MQL statements can be written entirely on one line, or split across \
          \n  separate lines, with spacing to make the more complex commands easier \
          \n  to read. \
        \n  There can be multiple MQL statements on a single line, separated by \
        \n  semicolons (most useful when passing commands at the commandline \
        \n  using -e).\n
usage=\n  add Mart < key='value'<, key='value'> <as MartName >>; -- \
      \n  Creates a Mart, with optional connection parameters and reference name. \
      \n  Parameter values must be single quoted, but can have whitespaces, (eg. key = 'value'). \
      \n  If connection parameters are specified, but no 'as' statement is included, defaults \
      \n  to user\instanceName@host:port.  If no connection parameters / name is provided,  \
      \n  and the mode is interactive, the shell querries the user for information to create a Mart, \
      \n  connection which can be used to execute mart querries against. \
      \n  see 'help add;' for more information. \
    \n\n  add datasets from URL|path|MartName; -- adds all Datasets \
      \n  provided by the MartRegistry.dtd compliant XML file/URL, or, from \
      \n  the Mart Service referenced by MartName. see 'help add;' \
      \n  for more information. \
    \n\n  add datasetview URL|Path <as fileName>; -- adds a Dataset.dtd compliant XML document \
      \n  file/URL to the system. If an 'as' command is supplied, the given fileName will be used \
      \n  to reference the dataset in all list, describe, update, and use/using commands. \
      \n  see 'help add;' for more information. \
    \n\n  remove Mart martName; -- removes the Mart, and any Datasets \
      \n  that have loaded from it. see 'help remove;' for more information. \
    \n\n  remove datasets <from URL|path|MartName>; -- removes all Datasets \
      \n  that have been loaded from the given MartRegistry.dtd compliant XML document File \
      \n  or URL, or from the given Mart Service that MartName uses. If no URL|path, \
      \n  or MartName is provided, all Datasets will be removed from the environmental Mart, or \
      \n, if no environmental Mart is set, an error is thrown. \
      \n  see 'help remove;' for more information. \
    \n\n  remove datasetview name -- removes the given DatasetView from the System. \
      \n  name can be relative to the environmental mart and dataset, or fully qualified as \
      \n  martname.datasetname.viewname. see 'help remove;' for more information. \
    \n\n  remove procedure name -- removes the given Named Procedure (see help MQL for \
      \n  information on Named Procedures) from the shell environment. \
      \n  see 'help remove;' for more information. \
    \n\n  list datasets <'all'|martName>; -- lists Datasets loaded. \
      \n  If 'all' or the name of a mart is not specified, then lists datasets for \
      \n  the environmental mart, or returns an error if no mart is set.  If 'all' \
      \n  is used, lists all datasets fully qualified with martname.datasetname. \
      \n  If the name of a given mart is provided, lists all datasets for the mart as \
      \n  martname.datasetname. Datasets loaded from files can only be listed with 'all', or \
      \n  by providing the fileName. \
    \n\n  list datasetviews <'all'|martname.datasetname>; -- lists DatasetViews loaded. \
      \n  If 'all' or martname.datasetname is not specified, then lists datasetviews for \
      \n  the environmental mart and dataset, or returns an error if no mart and dataset has been set. \
      \n  If 'all' is used, lists all datasetviews fully qualified with martname.datasetname.viewname. \
      \n  If the name of a given martname.datasetname is provided, lists all datasetviews for the \
      \n  mart and dataset as martname.datasetname.viewname. DatasetViews loaded from files can only be \
      \n  listed with 'all', or fileName.datasetname.  see 'help list;' for more information. \
    \n\n  list filters; -- lists all filters from the current environmental Dataset. \
      \n  if no Dataset has been 'used' returns an error. see 'help list;' for more information. \
    \n\n  list attributes; -- lists all attributes from the current environmental Dataset. \
      \n  if no Dataset has been 'used' returns an error.  see 'help list;' for more information. \
    \n\n  list procedures; -- lists all Named Procedures that have been stored. see 'help \
      \n  list;' for more information. \
    \n\n  list marts; -- lists all Marts that have been added with the add Mart \
      \n  command.  see 'help list;' for more information. \
    \n\n  update datasets <from URL|path|MartName>; -- updates all Datasets from the given \
      \n  URL|path|MartName, adding any new or modified Datasets that are specified from these \
      \n  sources.  If no URL|Path|MartName is specified, all Dataset sources for the environmental \
      \n  mart will be updated. \
      \n  see 'help update;' for more information. \
      \n  update dataset name; -- updates a particular Dataset from its source.  Note, if the \
      \n  source contains other Datasets, these will be added/updated as well. Name can be relative \
      \n  to the envrironmental mart, or absolute. \
      \n  see 'help update;' for more information. \
      \n  update datasetview name; -- updates a particular DatasetView from its source.  Note, if the \
      \n  source contains other DatasetViews, these will be added/updated as well. Name can be relative to \
      \n  the environmental mart and dataset, or absolute. \
      \n  see 'help update;' for more information. \
    \n\n  set Mart martName; -- sets the environmental Mart to use for Querries. \
      \n  see 'help set;' for more information. \
    \n\n  set prompt 'userSuppliedString'; -- resets the MartShell main prompt (not the command-continuation prompt) to \
      \n  a user specified prompt which resolves to 'userSuppliedString >'; see 'help set;' for more information. \
    \n\n  set output <format = 'x'><, file = 'y' <, separator='z'>>>; -- sets the \
      \n  format, file, and/or the output separator to use for all querries run \
      \n  within the session, until another 'set output' command is run. All values \
      \n  must be enclosed in single quotes, but whitespace is optional. \
      \n  If no format, file, or separator setting is provided, and the system is in \
      \n  interactive mode, the user is prompted for information. See 'help set;' for more \
      \n  information. \
    \n\n  set verbose (on|off); -- if a logging Configuration URL has not been specified at the commandline, \
      \n  this sets the system to verbose mode (debugging information). see 'help set;' for more information. \
    \n\n  unset Mart; -- unsets the environmental Mart. \
    \n\n  unset prompt; -- sets the prompt to its default setting. \
    \n\n  unset output (file|format|separator); -- sets all output settings, or the given output setting, \
      \n  to their default settings. \
    \n\n  unset verbose; -- sets verbose to the default setting (off if no logging Configuration URL was specified \
      \n  at the commandline). \
    \n\n  describe datasetname; -- describes the given Dataset. \
      \n  datasetname can be relative to the environmental mart, or absolute. \
      \n  See 'help describe;' for more information. \
    \n\n  describe filter filtername; -- describes the given filter from the environmental mart and Dataset. \
      \n  If no mart and Dataset has been set, an error is thrown.  see 'help describe;' for more \
      \n  information. \
    \n\n  describe attribute attributename; -- describes the given attribute from the environmental mart and Dataset. \
      \n  If no mart and DatasetView has been set, an error is thrown.  see 'help describe;' for more \
      \n  information. \
    \n\n  describe procedure name; -- prints the MQL for the given procedure. \
      \n  see 'help describe;' for more information. \
    \n\n  environment Mart; -- prints out information on the environmental Mart \
      \n  specified with 'set Mart;'. see 'help environment;' for more details. \
    \n\n  environment output (File|Format|Separator); -- shows the current output settings \
      \n  optionally for a specific output setting. see 'help environment;' for more information. \
    \n\n  environment dataset -- prints the name of the environmental Dataset \
      \n  specified in a 'use' command, fully qualified as martname.datasetname.viewname. \
    \n\n  use datasetname; -- sets the Dataset to use for the session, or until \
      \n  another use statement is executed. Name can be relative to the current \
      \n  environmental Mart, fully qualified to martname.datasetname (loads the default \
      \n  view for a dataset), or fully qualified to martname.datasetname.viewname (loads \
      \n  a specific view of the specified dataset.  Datasets and views loaded from local \
      \n  files must be specifed with a fully qualified name. \
      \n  See 'help use;' for more information. \
    \n\n  use DatasetName>MartName; -- sets both the Dataset and Mart to use \
      \n  for the session.  The Mart can be overridden with another call to use, or with \
      \n  a call to set Mart.  DatasetName can be relative to the given MartName, or absolute. \
      \n  see 'help use;' for more information. \
    \n\n  get att; -- get a single attribute, for all focus objects in the \
      \n  Dataset specified in the 'use dataset;' command (if no Dataset is set, \
      \n  an error is thrown). See 'help get;' for more information. \
    \n\n  get att1, att2; -- get two attributes for all focus objects in the \
      \n  specified Dataset. \
    \n\n  get att1 where filter1; -- get attribute for focus objects that fit \
      \n  a specified filter criterion. \
    \n\n  get att1 where filter1, filter2; -- same, with multiple filter \
      \n  criteria. \
    \n\n  using DatasetName<>MartName> get att; -- A using clause placed at \
      \n  the beginning of any MQL statement overrides the environmental Dataset, and optionally Mart \
      \n  provided in a use/set Mart command for the duration of this specific query. DatasetName can be \
      \n  relative to the environmental mart, relative to mart named by MartName, or absolute. \
      \n  This allows querries to be run against a dataset and mart without calling a set or use command (required \
      \n  for query chaining), or queries from one dataset to be applied against a different mart from which it was \
       \n  originally associated with (required to use a dataset loaded from a file). \
    DOMAINSPECIFIC:sequenceUsage \
    INSERT:COMPLETIONUSAGE \n
examples= \ # List mart databases \
         \n  list marts; \
         \n \
         \n # List all available datasets \
         \n list datasets all; \
         \n \
         \n # List datasets for a given mart \
         \n list datasets Ensembl \
         \n \
         \n # or \
         \n set mart Ensembl; \
         \n list datasets; \
         \n \
         \n # sets dataset; \
         \n use Ensembl.ensembl_genes_homo_sapiens; \
         \n \
         \n # or, if mart is set \
         \n use ensembl_genes_homo_sapiens; \
         \n \
         \n # now list availble attributes and filters; \
         \n # <tab><tab> will do the same thing \
         \n \
         \n list attributes; \
         \n list filters; \
         \n  \
         \n # now a real query \
         \n using MSD.structures get pdb_id where resolution_greater > 2; \
         \n \
         \n # chain examples \
         \n using MSD.structures  get pdb_id where resolution_greater > 3 and experiment_type and has_ec_info only as q; \
         \n using Ensembl.ensembl_genes_homo_sapiens get sequence transcript_flanks+1000 where pdb_id in q; \
         \n \
         \n using Ensembl.ensembl_genes_homo_sapiens get xref_swissprot_acc where disease_genes only and chromosome_name=22 as q; \
         \n using Uniprot.proteomes get prot_seq where sprot_list in q; \
         \n \
         \n using Ensembl.ensembl_genes_homo_sapiens get xref_swissprot_acc where nonsynonymous_snps only and disease_genes only as q; \
         \n using Uniprot.proteomes get uniprot_ac ,protein_name where sprot_list in q; \
         \n \
         \n # homology chain from ensembl \
         \n using Ensembl.ensembl_genes_homo_sapiens get mouse_homologue_ensembl_gene_id where chromosome_name=21 and  disease_genes only \
         \n and transmembrane_domains only as q; \
         \n using Ensembl.ensembl_genes_mus_musculus get sequence coding where ensembl_gene_id in q and chromosome_name in (10,16); \
         \n \
         \n # outputting to a file \
         \n set output file='myfile'; \
         \n using Ensembl.ensembl_genes_homo_sapiens get ensembl_gene_id; \n\n
describe=usage: describe type <parameters>; \
        \n\n  type can be one of: \
          \n    - dataset: describes the filters and attributes available in \
          \n       a Dataset.  Parameter can be the name of a specific dataset, either absolute (sourceName.datasetname \
          \n       for the default view for a dataset, or sourcename.datasetname.viewname for a particular view on a \
          \n       dataset), or relative to the environmental Mart (throws an error if not set). \
          \n    - Mart: describes the connection parameters (without the password) \
          \n       for the given Mart. \
          \n    - filter: describes a filter from the environmental Mart and DatasetView (throws an error if these \
          \n       are not set). Parameter must be a valid filter name. \
          \n    - attribute: same as filter, but describes the given attribute. \
          \n    - procedure: prints the MQL for a Named Procedure. \n
set=usage: set type <parameters>; \
      \n\n type can be one of: \
        \n    - Mart: parameter must be a valid MartName, sets the environmental Mart. \
        \n       this can only be overridden with a call to set Mart, unset Mart, or use. \
        \n    - dataset: paramter must be a valid dataset, either absolute (sourcename.datasetname for default \
        \n       view of datasetname, or sourcename.datasetname.viewname for specific view on datasetname), or \
        \n       relative to the environmental Mart (throws an error if not set). The datasetname>martname syntax \
        \n       can also be used to set the environmental mart and dataset in one call. \
        \n       This can be overridden with a subsequent call to set or use. \
        \n    - prompt: sets the main prompt (not the continuation prompt) to a user specified string. \
        \n       The string must be enclosed in quotes. Actually resolves to 'userString >'. \
        \n    - output: values are optional, but, if provided, must consist of one or \
        \n       more key = 'value' pairs.  Keys must be either format, file, or separator. \
        \n       values must be enclosed in single quotes. Multiple key, value pairs must be \
        \n       separated with commas. \
        \n       if no optional parameters are passed, the user is prompted for all \
        \n       possible settings to override for the session, with indications of defaults available. \
        \n       If any key = value parameters are passed, only these settings are overridden for the \
        \n       session. Note, for File output settings users can append output to an existing file by \
        \n       prepending the path with '>>' (eg, file = '>>myfile.txt' appends output to myfile.txt) \
        \n    - verbose: values must be either 'on' or 'off'.  If no logging configuration URL was \
        \n       provided at shell startup, this turns verbosity (debug output) on, or off. \n
unset=usage:unset type <paramters>; \
        \n\n type can be one of: \
          \n  - Mart: Unsets the environmental Mart. \
          \n  - dataset: unsets the environmental dataset. \
          \n  - prompt: sets the main Prompt to the default 'MartShell >'. \
          \n  - output: parameters are optional, but, if present, must be one of File, Format, or Separator. \
          \n     sets all, or a specified output setting to its default (STDOUT for File, Tabulated for Format, \
          \n     tab for Separator. \
          \n  - verbose: sets verbose output (debug information) to the default (off) position, unless a logging \
          \n     system configuration file has been specified, whereby an error is thrown. \n
add=usage: add type <parameters>; \
       \n\n type can be one of: \
         \n   - Mart: parameters are optional, but must consist of one or more key = 'value' pairs \
         \n      (value must be enclosed in single quotes, but whitespace between key, =, and value is optional) \
         \n      followed by an optional 'as userSpecifiedName' parameter which sets the name used to refer \
         \n      to this Mart in other Shell commands (defaults to user/instanceName@host:port). \
         \n      keys can be one of: \
         \n        * host: sets the RDBMS host \
         \n        * port: sets the RDBMS port. Defaults to 3306 for mysql. \
         \n        * user: sets the RDBMS user \
         \n        * password: sets the RDBMS password (note, passwords are not encrypted). \
         \n        * instanceName: sets the name of the Mart Database Instance to query. \
         \n        * databaseType: sets the type of RDBMS server. \
         \n        * jdbcDriver: sets the name of the Java JDBC Driver class to use to manage \
         \n           JDBC connections. Note, if both databaseType and jdbcDriver are left blank, \
         \n           type 'mysql', and driver 'com.mysql.jdbc.Driver' are used, respectively. \
         \n      If no key='value' pairs are entered during an interactive session, the \
         \n      user is prompted interactively for this information. If it is in batch mode and \
         \n      no key=value pairs are entered, an error is thrown. \
         \n      Each time a Mart is added, the environmental Mart is reset to the newly added Mart. \
         \n   - datasets: adds all datasets contained in a MartRegistry.xml document. \
         \n      Parameters must be of the form 'from path|URL'. \
         \n   - datasetview: Adds a specific dataset view from the filesystem.  Parameters must include \
         \n      a valid path or URL to a DatasetView.xml file, and can optionally contain an 'as sourceName' \
         \n      command that names the sourceName under which the datasetview is associated (defaults to 'userfiles'). \
         \n      Note, datasetviews loaded from the file system are treated differently from those loaded from \
         \n      mart sources. They can only be manipulated with their fully qualified pathname (eg. set, use, \
         \n      using, update, remove), and a mart must be manually associated with them during the 'set', \
         \n      'use', or 'using' command with the 'sourcename.datasetname.viewname>martname' syntax. \n
remove=usage: remove type <parameters>; \
       \n\n type can be one of: \
         \n    - Mart: parameter must be the refering name set with the add Mart command, or the default. \
         \n       Will also remove any datasets downloaded with the mart. 'list Marts;' will show all Marts loaded. \
         \n    - datasets: paramaters are optional, but, if present, must be of the form 'from MartName' \
         \n       for a source of Datasets.  If no parameters are passed, all Datasets are removed from the \
         \n       current environmental Mart (an error is thrown if environment Mart not set).  \
         \n       If a parameter is passed, the Dataset(s) loaded from the given source is(are) removed. \
         \n    - dataset: Removes a dataset from the Shell (including any DataseViews associated with it). \
         \n       parameter must be the name of a dataset, either absolute (sourcename.datasetname), or relative \
         \n       to the enrironmental mart (an error is thrown if this is not set). \
         \n    - datasetview: Removes a particular DatasetView from the Shell. Parameter must be the name \
         \n       of a loaded DatasetView (use 'list DatasetViews;'), either absolute (sourcename.datasetname.viewname), \
         \n       or relative to the environmental mart and dataset (an error is thrown if these are not set.) \
         \n    - procedure: Removes a stored procedure from the environment. Parameter must be the name of a \
         \n       stored Named Procedure. \n
update=usage: update type <parameters>; \
        \n\n  type can be one of: \
          \n    - datasets: parameters are optional, but, if present, must be of the from 'from MartName', where \
          \n       MartName is a valid Mart Source added with the add Mart command. \
          \n       updates the Dataset(s) loaded from the given source, or all datasets for the environmental Mart, \
          \n       if no parameters are supplied. \
          \n    - dataset: Updates the dataset (including any DataseViews associated with it). \
          \n       parameter can be the name of a dataset, either relative to the current Environmental Mart (an error \
          \n       is thrown if not set), or absolute (sourcename.datasetname). If no parameter is passed, \
          \n       updates the environmental dataset within the environmental mart (throws an error if these are not \
          \n       set). The only way to update a dataset loaded from a file is to pass sourceName.datasetname or \
          \n       sourcename.datasetname.viewname as a parameter. For datasets loaded from Marts, all Datasets will \
          \n       be updated.\n
list=usage: list type <parameters>; \
      \n\n  type can be one of: \
        \n    - datasets: lists Datasets loaded.  Parameters can be 'all' which lists all datasets as \
        \n      sourceName.datasetname, or the name of a source (martName or fileName) from which datasets \
        \n      have been loaded, also listing as sourceName.datasetname. If no parameter is supplied, lists \
        \n      all datasets relative to the current environmental Mart (or throws an error if not set). \
        \n      Note, the only way to see a dataset loaded from a datasetview.xml file from the file system is \
        \n      to use 'all' or the fully qualified sourcename.datasetname syntax, where sourcename is the url \
        \n      or name provided during the add datasetview command. \
        \n    - datasetviews: lists DatasetViews loaded. Parameters can be 'all' which lists all datasetviews as \
        \n      sourceName.datasetname.viewname, or the name of a source (fileName or martName) from which \
        \n      datasetviews were loaded, also listing as sourceName.datasetName.viewname. If no \
        \n      parameter is passed, lists all datasetviews for the environmental Mart and Dataset (or \
        \n      throws an error if either not set). \
        \n    - filters: lists all filters, in alphabetical order, for the environmental Dataset, \
        \n        or throws an error if this has not been set with a 'set' or 'use' command. \
        \n    - attributes: lists Attributes, in alphabetical order, for the environmental Dataset, \
        \n        or throws an error if this has not been set with a 'use' of 'set' command. \
        \n    - procedures: lists the names of any Named Procedures that have been loaded. \
        \n    - Marts: lists the names of all Marts loaded with the add Mart command. \n
execute=usage: execute type <parameter>: \
            \n\n type can be one of: \
              \n  - history: parameter must be of the form <n><,><y>. \
              \n     Executes the requested line ('exec n'), or series of lines ('exec n,y') \
              \n     and adds them to the history.  See 'help history' for information on \
              \n     the n,y system of denoting line numbers. \
              \n     executes lines 3 to 5, inclusive. \
              \n     Note, previous exec commands are ignored, to prevent infinite loops.\
              \n  - procedure: parameter must be the name of a Named Procedure, optionally \
              \n     followed immediately by any bind variable expansions surrounded by parentheses. \
              \n     see 'help namedProcedures' for more details. \
              \n     eg. exec procedure mystuff; vs exec procedure mystuff(variable1,variable2). \
              \n     Executes the given stored procedure. \
              \n  - Script: parameter must be a path or URL to a MQL script. \
              \n     Executes the MQL script. \n
environment=usage: environment <type <parameters>>; \
            \n\n Prints information for all, or a specified part, of the shell environment. \
              \n If no type/parameters are passed, prints all environment settings. \
              \n type can be one of: \
              \n  - Mart: prints the Mart connection information (not the name, but the \
              \n     server connection settings. \
              \n  - output: parameters are optional, but must be one of File, Format, or Separator, if \
              \n     present.  Prints all, or a specified part, of the current environmental \
              \n     output settings. \
              \n  - dataset: prints the name of the current environmental dataset relative to the environmental Mart, \
              \n     or absolute if it is one loaded from a file. \
              \n  - datasetview: prints the name of the view relative to the environmental dataset \n
loadScript=usage: loadScript path_to_your_file_goes_here \
                  \n\n  Loads the lines from a script into the history without executing them,\
                    \n  making them avialble for commandline editing. \
                  \n\nexamples: \
                  \n\tloadScript myScript.mql; \
                  \n\t  loads the commands in myScript.mql to your history.\n
saveToScript=usage: saveToScript <n><,><y> path_to_recieving_file \
                    \n\n  Stores all lines ('saveToScript path') or a series of lines ('saveToScript n,y path') \
                      \n  into a script file. See 'help history' for information on the n,y \
                      \n  system of denoting line numbers. \
                    \n\nexamples: \
                    \n\tsaveToScript 3,5 newScript.txt; \
                    \n\t  saves lines 3 to 5, inclusive, into newScript.txt.\n
history=usage: history <n><,><y> \
               \n\n  show all history ('history'), or one or more lines from the history. \
               \n   n denotes the number of the first line to include. \
               \n   y denotes the number of the last line to include. \
               \n  Either (but not both) can be blank, eg., 'n,' means all lines from n \
               \n  to the end of the history while ',y' means all lines from the beginning \
               \n  of the history to line y.\
               \n\nexamples: \
               \n\thistory 3,5; \
               \n\t\tshows lines 3 to 5, inclusive, from the history.\
               \n\n\thistory 3,; \
               \n\t\tshows all history lines, starting from line 3.\
               \n\n\thistory ,5;\
               \n\t\tshows all history lines up to, including, line 5.\n
using=usage: \n\tusing <sourcename.>datasetname<.viewname><>MartName> \
           \n\tget \
           \n\t< attribute_list > \
           DOMAINSPECIFIC:getSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\t< as namedProcedureName > \
           \n\n  The using clause is optional, but, if it is not present, a Dataset must \
             \n  have been set with the 'use' or 'set' command, or the -d switch to the Shell. \
             \n  datasetname must match the name of a Dataset provided by the MartConfiguration system. Datasetname \
             \n  can be absolute (datasource.dataset for default view of dataset, or sourcename.datasetname.viewname \
             \n  for a specific view of te dataset), or relative to te environmental Mart (an error is thrown if \
             \n  this is not set). In addition, the datasetname>martName can be used to specify the dataset (absolute or \
             \n  relative), and mart, but this should only be used for datasets loaded from the file system. \
             \n  Note, a using clause will not in any way affect the environmental mart and dataset, but only override \
             \n  them for a specific query. \
           \n\n  attribute_list is a comma-separated list of mart attributes.  These \
             \n  must match the internal_name of attributes in the DatasetView for \
             \n  the mart being querried (use 'describe datasetViewName' to get information \
             \n  on the names of DatasetView elements). attribute_list can be omitted for \
             \n  sequence_requests, otherwise, at least one attribute must be specified. \
             \n  Specifying attributes with a sequence_request requests that those \
             \n  attributes (if available) are included, either as fields in tabulated \
             \n  output or in the description portion of the header in fasta output. \
           \n\n  filter_list is a comma separated list of Filter Requests. \
             \n  See 'help FilterRequest' for information on the format for specifying \
             \n  filters in the where clause. \
           \n\n  if a limit request is specified, this adds a limit integer clause to \
             \n  the actual SQL executed against the mart database.  Note that this \
             \n  does not necessarily limit the number of records returned to the \
             \n  specified integer.  It limits the number of mart focus objects querried, \
             \n  for which attributes are returned. If there is a one-many, many-many, \
             \n  or many-one relationship between the mart focus object, and the \
             \n  attribute being requested, then the number of records returned will \
             \n  reflect this. \
             \n  using an 'as' clause stores the command as a named Procedure, that can \
             \n  executed later with the execute procedure command, or used as a chained \
             \n  filter in another MQL command. see 'help namedProcedures' for more details.\
           \n\n  examples: \
           \n\tusing myMart.ensembl_genes_homo_sapiens get ensembl_gene_id; \
           \n\t  returns all ensembl_gene_ids provided by ensembl_genes_homo_sapiens. \
          \n\n\tusing myFile.ensembl_genes_mus_musculus>myMart \
            \n\tget human_homologue_ensembl_gene_id \
            \n\twhere human_upstream_conserved_regions only \
            \n\tas mouseHumanHomologs; \
            \n\tStores a query for human ensembl_gene_ids for genes homologous with \
            \n\tmouse genes from the mouse ensembl dataset. \
          \n\n\tusing myMart.vega_genes_homo_sapiens.simple \
            \n\tget sequence peptide \
           \n\twhere vega_gene_id in mouseHumanHomologs and \
           \n\t  disease_genes only; \
           \n\tselects vega peptide sequences for genes that are homologous with \
           \n\tmouse genes, further limiting the mouse genes to those having \
           \n\thuman upstream conserved regions, and further limiting the \
           \n\thuman genes to disease genes. Also specifies the simple datasetview of vega, instead \
           \n\tof the default. \
           \n\n\tusing ensembl_genes_homo_sapiens get ensembl_transcript_id where ensembl_family_id in myFamilyIds.txt and \
           \n\t hugo_id_xrefs only; \
           \n\tselects all human ensembl transcript stable ids which map the \
           \n\tensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\tand which have hugo references.\n
get=usage: \n\t<using <sourcename.>datasetname<.viewname><>MartName>> \
           \n\tget \
           \n\t< attribute_list > \
           DOMAINSPECIFIC:getSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\t< as namedProcedureName > \
           \n\n  The using clause is optional, but, if it is not present, a Dataset must \
             \n  have been set with the 'use' or 'set' command, or the -d switch to the Shell. \
             \n  datasetname must match the name of a Dataset provided by the MartConfiguration system. Datasetname \
             \n  can be absolute (datasource.dataset for default view of dataset, or sourcename.datasetname.viewname \
             \n  for a specific view of te dataset), or relative to te environmental Mart (an error is thrown if \
             \n  this is not set). In addition, the datasetname>martName can be used to specify the dataset (absolute or \
             \n  relative), and mart, but this should only be used for datasets loaded from the file system. \
             \n  Note, a using clause will not in any way affect the environmental mart and dataset, but only override \
             \n  them for a specific query. \
           \n\n  attribute_list is a comma-separated list of mart attributes.  These \
             \n  must match the internal_name of attributes in the DatasetView for \
             \n  the mart being querried (use 'describe datasetViewName' to get information \
             \n  on the names of DatasetView elements). attribute_list can be omitted for \
             \n  sequence_requests, otherwise, at least one attribute must be specified. \
             \n  Specifying attributes with a sequence_request requests that those \
             \n  attributes (if available) are included, either as fields in tabulated \
             \n  output or in the description portion of the header in fasta output. \
           \n\n  filter_list is a comma separated list of Filter Requests. \
             \n  See 'help FilterRequest' for information on the format for specifying \
             \n  filters in the where clause. \
           \n\n  if a limit request is specified, this adds a limit integer clause to \
             \n  the actual SQL executed against the mart database.  Note that this \
             \n  does not necessarily limit the number of records returned to the \
             \n  specified integer.  It limits the number of mart focus objects querried, \
             \n  for which attributes are returned. If there is a one-many, many-many, \
             \n  or many-one relationship between the mart focus object, and the \
             \n  attribute being requested, then the number of records returned will \
             \n  reflect this. \
             \n  using an 'as' clause stores the command as a named Procedure, that can \
             \n  executed later with the execute procedure command, or used as a chained \
             \n  filter in another MQL command. see 'help namedProcedures' for more details.\
           \n\n  examples: \
           \n\tusing ensembl_genes_homo_sapiens get ensembl_gene_id; \
           \n\t  returns all ensembl_gene_ids provided by ensembl_genes_homo_sapiens. \
          \n\n\tusing ensembl_genes_mus_musculus \
            \n\tget human_homologue_ensembl_gene_id \
            \n\twhere human_upstream_conserved_regions only \
            \n\tas mouseHumanHomologs; \
            \n\tStores a query for human ensembl_gene_ids for genes homologous with \
            \n\tmouse genes from the mouse ensembl dataset. \
          \n\n\tusing ensembl_genes_homo_sapiens \
            \n\tget sequence peptide \
           \n\twhere ensembl_gene_id in mouseHumanHomologs and \
           \n\t  disease_genes only; \
           \n\tselects peptide sequences for genes that are homologous with \
           \n\tmouse genes, further limiting the mouse genes to those having \
           \n\thuman upstream conserved regions, and further limiting the \
           \n\thuman genes to disease genes. \
           \n\n\tusing ensembl_genes_homo_sapiens get ensembl_transcript_id where ensembl_family_id in myFamilyIds.txt and \
           \n\t hugo_id_xrefs only; \
           \n\tselects all human ensembl transcript stable ids which map the \
           \n\tensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\tand which have hugo references.\n
MQL=usage: \n\t<using <sourcename.>datasetname<.viewname><>MartName>> \
           \n\tget \
           \n\t< attribute_list > \
           DOMAINSPECIFIC:getSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\t< as namedProcedureName > \
           \n\n  The using clause is optional, but, if it is not present, a Dataset must \
             \n  have been set with the 'use' or 'set' command, or the -d switch to the Shell. \
             \n  datasetname must match the name of a Dataset provided by the MartConfiguration system. Datasetname \
             \n  can be absolute (datasource.dataset for default view of dataset, or sourcename.datasetname.viewname \
             \n  for a specific view of te dataset), or relative to te environmental Mart (an error is thrown if \
             \n  this is not set). In addition, the datasetname>martName can be used to specify the dataset (absolute or \
             \n  relative), and mart, but this should only be used for datasets loaded from the file system. \
             \n  Note, a using clause will not in any way affect the environmental mart and dataset, but only override \
             \n  them for a specific query. \
           \n\n  attribute_list is a comma-separated list of mart attributes.  These \
             \n  must match the internal_name of attributes in the DatasetView for \
             \n  the mart being querried (use 'describe datasetViewName' to get information \
             \n  on the names of DatasetView elements). attribute_list can be omitted for \
             \n  sequence_requests, otherwise, at least one attribute must be specified. \
             \n  Specifying attributes with a sequence_request requests that those \
             \n  attributes (if available) are included, either as fields in tabulated \
             \n  output or in the description portion of the header in fasta output. \
           \n\n  filter_list is a comma separated list of Filter Requests. \
             \n  See 'help FilterRequest' for information on the format for specifying \
             \n  filters in the where clause. \
           \n\n  if a limit request is specified, this adds a limit integer clause to \
             \n  the actual SQL executed against the mart database.  Note that this \
             \n  does not necessarily limit the number of records returned to the \
             \n  specified integer.  It limits the number of mart focus objects querried, \
             \n  for which attributes are returned. If there is a one-many, many-many, \
             \n  or many-one relationship between the mart focus object, and the \
             \n  attribute being requested, then the number of records returned will \
             \n  reflect this. \
             \n  using an 'as' clause stores the command as a named Procedure, that can \
             \n  executed later with the execute procedure command, or used as a chained \
             \n  filter in another MQL command. see 'help namedProcedures' for more details.\
           \n\n  examples: \
           \n\tusing ensembl_genes_homo_sapiens get ensembl_gene_id; \
           \n\t  returns all ensembl_gene_ids provided by ensembl_genes_homo_sapiens. \
          \n\n\tusing ensembl_genes_mus_musculus \
            \n\tget human_homologue_ensembl_gene_id \
            \n\twhere human_upstream_conserved_regions only \
            \n\tas mouseHumanHomologs; \
            \n\tStores a query for human ensembl_gene_ids for genes homologous with \
            \n\tmouse genes from the mouse ensembl dataset. \
          \n\n\tusing ensembl_genes_homo_sapiens \
            \n\tget sequence peptide \
           \n\twhere ensembl_gene_id in mouseHumanHomologs and \
           \n\t  disease_genes only; \
           \n\tselects peptide sequences for genes that are homologous with \
           \n\tmouse genes, further limiting the mouse genes to those having \
           \n\thuman upstream conserved regions, and further limiting the \
           \n\thuman genes to disease genes. \
           \n\n\tusing ensembl_genes_homo_sapiens get ensembl_transcript_id where ensembl_family_id in myFamilyIds.txt and \
           \n\t hugo_id_xrefs only; \
           \n\tselects all human ensembl transcript stable ids which map the \
           \n\tensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\tand which have hugo references.\n
FilterRequest=usage: filter_name qualifier <value> \
                     \n\n  Filters must be in one of the following formats: \
                     \n\t- filter_name excluded|only  -- specifies that objects \
                     \n\t  should be returned only if they match (only), or only \
                     \n\t  if they do not match (excluded) this filter. This format is \
                     \n\t  only applicable to boolean and boolean_num type filters. \
                     \n\n\t- filter_name =|!=|>|>=|<|<= value \
                     \n\n\t- filter_name in list (see 'help FilterList' for further information) \
                     \n\n  filter_name must match the internal_name for a filter specified in \
                       \n  the DatasetView for the mart being querried. \
                       \n  When the filter is part of a filter_set (as specified in the DatasetView \
                       \n  System), the filter_name must be further qualified with a filter_set_name \
                       \n  (see 'help FilterSet' for further information). Multiple filter requests must be \
                       \n  separated with the word 'and'. \
                     \n\n  examples: \
                     \n\n\tdisease_genes only \
                     \n\t\tspecifies that only genes that are known disease_genes should be returned. \
                     \n\n\tensembl_gene_id = ENSG0000001 \
                     \n\t\t(Note, no quoting is required.)  Only get Information for this one gene. \
                     \n\n\tensembl_gene_id = ENSG0000001 and disease_genes excluded \
                     \n\t\tspecifies that this gene should only be returned if it is not a disease_gene.\n
FilterSet=usage: filter_set_name.filter_name qualifier <value> \
                 \n\n  The filter_name for filters in collections belonging to a FilterSet \
                   \n  must be further qualified with a filter_set_name separated from the \
                   \n  filter_name with a period. \
                 \n\n  example: \
                 \n\n\tensembl_gene.coding_snps only \
                 \n\t\tspecifies that only snps that are coding_snps in ensembl genes should be returned.\n
FilterList=usage:  filter_name in list \
             \n\nlist requests must be in one of the following formats: \
             \n\t -filter_name in path|url - path/url must point to some \
             \n\t  resource with ids matching the filter_name, one per line \
             \n\t -filter_name in (comma_separated_list of ids matching filter_name). \
             \n\t  Note, the list must be enclosed in perentheses, but no quoting \
             \n\t  is required \
             \n\t -filter_name in namedProcedureName (see 'help namedProcedures' for details).\
             \n\n  examples: \
             \n\n\tensembl_gene_id in myGeneIds.txt \
             \n\t\tonly return genes that match the gene_ids in the file myGenes.txt. \
             \n\n\tensembl_gene_id in (ENSG0000000001, ENSG0000000002, ENSG00000003) \
             \n\t\tonly return genes matching the ensembl_gene_ids in the list.\n
use=usage: use <sourcename.>datasetname<.viewname><>martName> \
           \n\n  Sets the environmental dataset, and potentially, the environmental mart, or specific view on dataset \
             \n  as well. If sourcename is a martName, or the 'datasetname>martName' syntax is used, the \
             \n  environmental mart will be set to sourcename, or martName, respectively. \n
namedProcedures=Users can store MQL commands to execute later either with the execute procedure command, or as a list \
                \n filter in another MQL command.  Procedures can be stored with bind variables (using the question mark '?') \
                \n in place of actual strings, and these can be bound at usage to specific values each time the named \
                \n procedure is executed.  To store a namedProcedure, type an entire MQL command as you would to \
                \n execute it, but end it with 'as namedProcedureName'.  To execute this procedure, type \
                \n execute procedure namedProcedureName; \
                \n To use the named Procedure as a list filter in another MQL query, use the namedProcedureName \
                \n as the value to the filter in the other MQL. \
                \n To execute a command with bind variables, either using execute, or in a list filter, \
                \n append the replacement strings, in the order in which they should substitute for \
                \n question marks in the original MQL, separated by commas within perentheses to the namedProcedureName. \
              \n\n examples: \
                \n using ensembl_genes_mus_musculus get human_homologue_ensembl_gene_id as humanMouseHomologs; \
                \n execute procedure humanMouseHomologs; \
                \n using ensembl_genes_homo_sapiens get ensembl_gene_id where ensembl_gene_id in humanMouseHomologs; \
                \n using ? get human_homologue_ensembl_gene_id where transmembrane_domains ? as humanHomologs; \
                \n execute procedure humanHomologs(ensembl_genes_mus_musculus,only); \
                \n using ensembl_genes_homo_sapiens get ensembl_gene_id where ensembl_gene_id in humanHomologs(ensembl_genes_mus_musculus,only); \n
