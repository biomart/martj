startUp=\t\t\t\tMartShell \
        \n\n\tAn Interactive User Interface to Mart based on Mart Query Language (MQL) \
        CommandHistoryHelp \
        CommandCompletionHelp \
        \n\n  type 'help' for a list of available commands, or type 'help command' to get help for a particular command. \
        \n\n  The system has a 'describe' command to display attributes of the mart being querried (see 'help describe' for further information). \
        \n\n  Mart Query Language commands are designed to resemble human-readable english sentences (for more information on MQL \
        \n  type 'help MQL'). Some example MQL commands: \
        \n\n\tget ensembl_gene_id; \
        \n\t  This requires that a dataset be set using a previous 'use' command (see 'help use' for information), or the -d switch to the Shell. \
        \n\t  It would return all of the ensembl_gene_id entries for the dataset previously set with the 'use' command or -d switch. \
        \n\n\tusing homo_sapiens_ensembl_genes get ensembl_gene_id where disease_genes exclusive; \
        \n\t  This command would get all ensembl_gene_ids for homo_sapiens_ensembl_genes disease genes, temporarily over riding the \
        \n\t  Dataset set with a previous 'use' command' for the duration of the individual query. \
        \n\n  MQL statements can be written entirely on one line, or split across separate lines, with spacing to make the more \
        \n  complex commands easier to read.\n

CommandHistoryHelp=\n\n\tThe Shell provides a command history system allowing you to type the up arrow key to scroll through \
                  \n\tprevious commands.  It saves your history between sessions.  Use the 'history', 'exec', and 'saveToScript' \
                  \n\tcommands to manipulate your history in other ways (see help for further details).

CommandCompletionHelp=\tThe Shell also provides advanced, context sensitive command completion.  Hitting the tab key once \
                     \n\tduring a command will attempt to complete what you are typing, or, given multiple possible completions, beep.\
                     \n\tHitting the tab key twice in succession causes the system to display a list of possible completions available, \
                     \n\tbased on the exact point you are located in a command (in the case of MQL querries, even across multiple lines).

describe=usage: describe dataset_name <FilterPage name <FilterGroup name <FilterSet name <FilterSetDescription name> \
                                                                \n\t\t\t\t\t\t\t\t|FilterCollection name <Filter name> \
                                                                \n\t\t\t\t\t\t\t\t|Filter name> \
                                                \n\t\t\t\t\t      |Filter name> \
                                   \n\t\t\t     |Filter name \
                                   \n\t\t\t     |AttributePage name <AttributeGroup name <AttributeCollection name <Attribute name> \
                                                                       \n\t\t\t\t\t\t\t\t|Attribute name> \
                                                       \n\t\t\t\t\t      |Attribute name> \
                                   \n\t\t\t     |Attribute name> \n \
         \n\nDescribes a specific portion of the MartConfiguration system.\nexamples:\n \
         \tdescribe homo_sapiens_ensembl_genes \
         \n\t describes dataset homo_sapiens_ensembl_genes and lists the pages it contains. \
         \n\n\tdescribe homo_sapiens_ensembl_genes FilterPage default_page \
         \n\t describes FilterPage default_page from homo_sapiens_ensembl_genes, \
         \n\t with a description of each FilterGroup available from it. \
         \n\n\tdescribe homo_sapiens_ensembl_genes Filter ensembl_gene_id \
         \n\t describes the ensembl_gene_id Filter from homo_sapiens_ensembl_genes \
         \n\n\tdescribe homo_sapiens_ensembl_genes FilterPage default_page FilterGroup expression FilterSet expression_type FilterSetDescription gnf \
         \n\t describes the gnf FilterSetDescription from FilterSet expression_type, FilterGroup expression, FilterPage default_page, \
         \n\t dataset homo_sapiens_ensembl_genes. \
         \n\n\tdescribe homo_sapiens_ensembl_genes FilterPage default_page FilterGroup region FilterCollection chromosome \
         \n\t describes the chromosome FilterCollection from the region FilterGroup, default_page FilterPage, dataset homo_sapiens_ensembl_genes. \
         \n\n\tdescribe homo_sapiens_ensembl_genes Attribute ensembl_gene_id \
         \n\t describes the ensembl_gene_id attribute from dataset homo_sapiens_ensembl_genes.\
         \n\n\tdescribe homo_sapiens_ensembl_genes AttributePage feature_page AttributeGroup region \
         \n\t describes the region AttributeGroup from AttributePage feature_page, Dataset homo_sapiens_ensembl_genes. \n

setPrompt=usage: setPrompt string (use - to return to the default state: 'user@mysqlhost : martname >'\n

setOutputSettings=usage: setOutputSettings x=y<,x=y>* \
                 \n\nSets one or more of the output settings for all querries during the session. \
                 \nOver rides default values (file = stdout, format = tabulated, separator = tab) \
                 \nSettings can then be changed with another call to setOutputSettings,\
                 or with an into statement in a Query (see 'help into' for details). \
                 \nAt least one key=value parameter must be supplied, up to three may be \
                 supplied separated by commas\n\nx  can be one of : \n\tfile (use '-' for stdout, or specify a valid path),\n\tformat \
                 (must be tabulated or fasta),\n\tseparator (use 'comma' for comma separated, otherwise, provide a character to separate the fields).\
                 \n\nThis sets these settings for the entire shell session. \
                 \nexamples: \
                 \n\tsetOutputSettings file=mygenes.txt,format=tabulated,separator=comma \
                 \n\t\tsets the session wide file to mygenes.txt (all querries will append to this file, until another call to setOutputSettings file:) \
                 \n\t\tin tabulated comma separated format. \
                 \n\n\tsetOutputSettings format=fasta \
                 \n\t\tsets the output to fasta, leaving the file and separator setting unchaged. \
                 \n\n\tsetOutputSettings format=tabulated,separator=	\
                 \n\t\tsets the output format to tabulated tab separated, leaving the file output unchanged. \n

setConnectionSettings=usage: setConnectionSettings <key=value<,key=value>*> \
                      \n\nSets the following connection settings: \
                      \n\tRDBMS host (key = host) \
                      \n\tRDBMS type (key = databaseType) \
                      \n\tRDBMS port (key = port) \
                      \n\tRDBMS user (key = user) \
                      \n\tRDBMS password (key = password) \
                      \n\tname of the mart database (key = databaseName) \
                      \n\tpath to alternate martConfiguration.xml document (key = alternateConfigurationFile) \
                      \n\nIf no key=value pairs are entered during an interactive session, the user is presented a series of questions. \
                      \nIf it is in batch mode and no key=value pairs are entered, an error is thrown \
                      \n\nexamples: \
                      \n\tsetConnectionSettings host=kaka.sanger.ac.uk \
                      \n\t\tclient will attempt to connect to the RDBMS running on kaka.sanger.ac.uk, using the other connection settings as they were \
                      \n\t\tbefore. \
                      \n\n\tsetConnectionSettings host=localhost,port=3307,user=anonymous,databaseName=ensembl_mart_14_1 \
                      \n\t\tclient will attempt to connect to the RDBMS running on the localhost, port 3307, using username anonymous (password remains \
                      \n\t\tunchanged), and query the ensembl_mart_14_1 database. \
                      \n\n\tsetConnectionSettings alternateConfigurationFile myConfigurationFile.xml \
                      \n\t\tall connection settings remain unchanged, but the system gets its configuration information from the specified xml file. \
                      \n\t\tNote, the default mode is to pull the configuration xml information from the RDBMS. \n

setVerbose=usage: setVerbose on|off (on turns logging system output on, off turns it off)\n

exec=usage: exec <n><,><y>  \
            \n\nIf History is available, executes the requested line ('exec n'), or series of lines ('exec n,y') and adds them to the \
            history.\nsee 'help history' for information on the n,y system of denoting line numbers. \
            \n\nexamples: \
            \n\texec 3,5 \
            \n\t  executes lines 3 to 5, inclusive. \
            \n\nNote, previous exec commands are ignored, to prevent infinite loops.\n

runScript=usage: runScript path_to_your_file_goes_here \
                 \n\nruns the querries in a script file in sequence, adding the lines to the history \
                 \nif it is available. \
                 \n\nexample: \
                 \n\trunScript myScript.mql \
                 \n\t  executes all statements in the file myScript.mql, adding them to the history.\n

loadScript=usage: loadScript path_to_your_file_goes_here \
                  \n\nIf the history system is available, loads the lines from a script into the history without executing them, \
                  \nmaking them avialble for commandline editing. \
                  \n\nexamples: \
                  \n\tloadScript myScript.mql \
                  \n\t  loads the commands in myScript.mql to your history.\n

saveToScript=usage: saveToScript <n><,><y> path_to_recieving_file \
                    \n\nIf the history system is available,\nstores all lines ('saveToScript path') \
                    or a series of lines ('saveToScript n,y path') into a script file. \
                    \n\nsee 'help history' for information on the n,y system of denoting line numbers. \
                    \n\nexamples: \
                    \n\tsaveToScript 3,5 newScript.txt \
                    \n\t  saves lines 3 to 5, inclusive, into newScript.txt.\n

history=usage: history <n><,><y> \
               \n\nshow all history ('history'), or one or more lines from the history. \
               \n n denotes the number of the first line to include. \
               \n y denotes the number of the last line to include. \
               \nEither (but not both) can be blank, eg., 'n,' means all lines from n to the end of the history \
               \nwhile ',y' means all lines from the beginning of the history to line y. \
               \n\nexamples: \
               \n\thistory 3,5 \
               \n\t\tshows lines 3 to 5, inclusive, from the history. \
               \n\n\thistory 3, \
               \n\t\tshows all history lines, starting from line 3. \
               \n\n\thistory ,5 \
               \n\t\tshows all history lines up to, including, line 5.\n

MQL=usage: \n\t<using dataset_name> \
           \n\tget \
           \n\t< attribute_list > \
           \n\tDOMAINSPECIFIC selectSequenceUsage \
           \n\t< where filter_list > \
           \n\t< limit integer > \
           \n\nThe using clause is optional, but, if it is not present, a dataset must have been set with the 'use' command, \
           \nor the -d switch to the Shell. dataset_name must match the name of a dataset provided by the MartConfiguration system. \
           \n\nattribute_list is a comma-separated list of mart attributes.  These must match the internal_name of attributes \
           \nin the MartConfiguration for the mart being querried (use 'describe' to get information on the names of MartConfiguration elements). \
           \nattribute_list can be omitted for sequence_requests, otherwise, at least one attribute must be specified. \
           \nSpecifying attributes with a sequence_request requests that those attributes (if available) are included, either as \
           \nfields in tabulated output or in the description portion of the header in fasta output. \
           \n\nfilter_list is a comma separated list of Filter Requests. \
           \nSee 'help FilterRequest' for information on the format for specifying filters in the where clause. \
           \n\nif a limit request is specified, this adds a limit integer clause to the actual SQL executed against the mart database.  \
           \nNote that this does not necessarily limit the number of records returned to the specified integer.  It limits the number of \
           \nmart focus objects querried, for which attributes are returned. If there is a one-many, many-many, or many-one relationship \
           \nbetween the mart focus object, and the attribute being requested, then the number of records returned will reflect this. \
           \n\nexamples: \
           \n\tselect ensembl_gene_id from homo_sapiens_ensembl_genes; \
           \n\t  returns all ensembl_gene_ids provided by homo_sapiens_ensembl_genes. \
           \n\n\tselect sequence peptide \
           \n\tfrom homo_sapiens_ensembl_genes \
           \n\twhere ensembl_gene_id in (select human_homologue_ensembl_gene_id \
           \n\t\t\t\t  from mus_musculus_ensembl_genes \
           \n\t\t\t\t  where human_upstream_conserved_regions exclusive), \
           \n\tdisease_genes exclusive; \
           \n\t  selects peptide sequences for genes that are homologous with mouse genes, further limiting the mouse genes to those having human \
           \n\t  upstream conserved regions, and further limiting the human genes to disease genes. \
           \n\n\tselect ensembl_transcript_id from homo_sapiens_ensembl_genes where ensembl_family_id in myFamilyIds.txt, hugo_id_xrefs exclusive; \
           \n\t  selects all human ensembl transcript stable ids which map the the ensembl_family_id in a list specified by the file myFamilyIds.txt, \
           \n\t  and which have hugo references.\n              

FilterRequest=usage: filter_name qualifier <value> \
                     \n\nFilters must be in one of the following formats: \
                     \n\t- filter_name excluded|exclusive  -- specifies that objects should be returned only if they match (exclusive), \
                     \n\tor only if they do not match (excluded) this filter. This format is only applicable to boolean type filters. \
                     \n\n\t- filter_name =|!=|>|>=|<|<= value \
                     \n\n\t- filter_name in list (see 'help list' for further information) \
                     \n\nfilter_name must match the internal_name for a filter specified in the MartConfiguration for the mart being querried. \
                     \nWhen the filter is part of a filter_set (as specified in the MartConfiguration System), \
                     \nthe filter_name must be further qualified with a filter_set_name (see 'help FilterSet' for further information). \
                     \n\nexamples: \
                     \n\n\tdisease_genes exclusive \
                     \n\t\tspecifies that only genes that are known disease_genes should be returned. \
                     \n\n\tensembl_gene_id = ENSG0000001 \
                     \n\t\t(Note, no quoting is required.)  Only get Information for this one gene. \n

FilterSet=usage: filter_set_name.filter_name qualifier <value> \
                 \n\nThe filter_name for filters in collections belonging to a FilterSet \
                 \nmust be further qualified with a filter_set_name separated from the filter_name with a period. \
                 \n\nexample: \
                 \n\n\tensembl_gene.coding_snps exclusive \
                 \n\t\tspecifies that only snps that are coding_snps in ensembl genes should be returned.\n

list=usage:  filter_name in list \
             \n\nlist requests must be in one of the following formats: \
             \n\tfilter_name in url - url must be a valid url pointing to some resource with ids matching the filter_name, one per line \
             \n\tfilter_name in (comma_separated_list of ids matching filter_name). Note, the list must be enclosed in perentheses, \
             \n\t\tbut no quoting is required \
             \n\tfilter_name in (NestedQuery).  See 'help NestedQuery' for details.  Note, the NestedQuery must be enclosed with perentheses. \
             \n\nexamples: \
             \n\n\tensembl_gene_id in myGeneIds.txt \
             \n\t\tonly return genes that match the gene_ids in the file myGenes.txt. \
             \n\n\tensembl_gene_id in (ENSG0000000001, ENSG0000000002, ENSG00000003) \
             \n\t\tonly return genes matching the ensembl_gene_ids in the list.\n

NestedQuery=usage: filter_name in (query) \
                  \n\nNested Queries must meet the requirements of a full query (see 'help select' for details), along with the \
                  \nfollowing constraints: \
                  \n\tThey must only return one attribute, and values returned by that attribute must be applicable to the \
                  \n\t\tfilter_name provided in the filter request. \
                  \n\tThey cannot include a sequence request \
                  \n\tCurrently, only one level of nesting is allowed (eg., a NestedQuery cannot include another NestedQuery filter). \
                  \n\nexample: \
                  \n\n\tensembl_gene_id in (select human_homologue_ensembl_gene_id from mus_musculus_ensembl_genes) \
                  \n\t\tonly returns genes with gene_ids matching the ids for genes homologous with mouse.\n

use=usage: use dataset_name \
           \n\nThis sets the Dataset for subsequent querries.  This dataset can only be over ridden with a 'using' clause in the MQL, or \
           \nwith a subsequent call to 'use'. \n